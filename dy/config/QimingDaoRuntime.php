<?php  class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const TCP = 2; const FILE = 3; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || strpos(C('LOG_RECORD_LEVEL'),$level)) { $now = date(self::$format); self::$log[] = "{$now} ".$_SERVER['REQUEST_URI']." \n  {$level}: {$message}\r\n"; } } static function save($type=self::FILE,$destination='',$extra='') { if(empty($destination)) $destination = LOG_PATH.'/'.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log(implode("",self::$log), $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type=self::FILE,$destination='',$extra='') { $now = date(self::$format); if(empty($destination)) $destination = LOG_PATH.'/'.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log("{$now} ".$_SERVER['REQUEST_URI']." | {$level}: {$message}\r\n", $type,$destination,$extra ); } } class Qiming { private static $_instance = array(); public function __set($name ,$value) { if(property_exists($this,$name)) $this->$name = $value; } public function __get($name) { return isset($this->$name)?$this->$name:null; } public static function autoload($classname) { if(qmload($classname)) return ; if(substr($classname,-6)=="Action"){ qmload(APP_ACTION_PATH.'/'.$classname.'.class.php'); }else { if(qmconfig('APP_AUTOLOAD_PATH')) { $paths = explode(',',qmconfig('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(qmload($path.'/'.$classname.'.class.php')) return ; } } } return ; } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('class not exisits').' = '.$class.' = '.$method); } return self::$_instance[$identify]; } } qmdefine('HAS_ONE',1); qmdefine('BELONGS_TO',2); qmdefine('HAS_MANY',3); qmdefine('MANY_TO_MANY',4); class Model extends Qiming { const MODEL_INSERT = 1; const MODEL_UPDATE = 2; const MODEL_BOTH = 3; const MUST_VALIDATE = 1; const EXISTS_VAILIDATE = 0; const VALUE_VAILIDATE = 2; private $_extModel = null; protected $db = null; protected $pk = 'id'; protected $tablePrefix = ''; protected $tableSuffix = ''; protected $name = ''; protected $dbName = ''; protected $tableName = ''; protected $trueTableName =''; protected $error = ''; protected $fields = array(); protected $data = array(); protected $options = array(); protected $_validate = array(); protected $_auto = array(); protected $_map = array(); protected $autoCheckFields = true; protected $forceCheckFields = false; protected $cache = null; public function __construct($name='') { $this->_initialize(); if(!empty($name)) { $this->name = $name; }elseif(empty($this->name)){ $this->name = $this->getModelName(); } $this->db = Db::getInstance(empty($this->connection)?'':$this->connection); $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX'); $this->tableSuffix = $this->tableSuffix?$this->tableSuffix:C('DB_SUFFIX'); if(!empty($this->name) && $this->autoCheckFields) $this->_checkTableInfo(); if(!empty($this->tableName) && empty($this->fields)) throw_exception('开发阶段,请为你的model填写fields!'); $this->cache = model('Cache'); } protected function _checkTableInfo() { if(empty($this->fields)) { if($this->forceCheckFields) throw_exception($class.L('_FIELDS_IS_EMPTYNOT_')); if(C('DB_FIELDS_CACHE')) { $this->fields = F('_fields/'.$this->name); if(!$this->fields) $this->flush(); }else{ $this->flush(); } } } public function flush() { $fields = $this->db->getFields($this->getTableName()); $this->fields = array_keys($fields); $this->fields['_autoinc'] = false; foreach ($fields as $key=>$val){ $type[$key] = $val['type']; if($val['primary']) { $this->fields['_pk'] = $key; if($val['autoinc']) $this->fields['_autoinc'] = true; } } if(C('DB_FIELDTYPE_CHECK')) $this->fields['_type'] = $type; if(C('DB_FIELDS_CACHE')) F('_fields/'.$this->name,$this->fields); } public function switchModel($type,$vars=array()) { $class = ucwords(strtolower($type)).'Model'; if(!class_exists($class)) throw_exception($class.L('model 不存在')); $this->_extModel = new $class($this->name); if(!empty($vars)) { foreach ($vars as $var) $this->_extModel->setProperty($var,$this->$var); } return $this->_extModel; } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { return isset($this->data[$name])?$this->data[$name]:null; } public function __isset($name) { return isset($this->data[$name]); } public function __unset($name) { unset($this->data[$name]); } public function __call($method,$args) { if(in_array(strtolower($method),array('field','table','where','order','limit','page','having','group','lock','distinct'),true)) { $this->options[strtolower($method)] = $args[0]; return $this; }elseif(in_array(strtolower($method),array('count','sum','min','max','avg'),true)){ $field = isset($args[0])?$args[0]:'*'; return $this->getField(strtoupper($method).'('.$field.') AS tp_'.$method); }elseif(strtolower(substr($method,0,5))=='getby') { $field = parse_name(substr($method,5)); $options['where'] = $field.'=\''.$args[0].'\''; return $this->find($options); }else{ throw_exception(__CLASS__.':'.$method.L('方法不存在')); return; } } public function _initialize() {} public function getSourceInfo($ids = '') {} public function cleanCache($ids = '') {} protected function _facade($data) { if(!empty($this->fields)) { foreach ($data as $key=>$val){ if(!in_array($key,$this->fields,true)){ unset($data[$key]); continue; } if(C('DB_FIELDTYPE_CHECK') && is_scalar($val)) { $fieldType = strtolower($this->fields['_type'][$key]); if(false !== strpos($fieldType,'int')) { $data[$key] = intval($val); }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){ $data[$key] = floatval($val); } } } } $this->_before_write($data); return $data; } protected function _before_write(&$data) {} public function add($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('数据渲染失败'); return false; } } $options = $this->_parseOptions($options); $data = $this->_facade($data); if(false === $this->_before_insert($data,$options)) { return false; } $result = $this->db->insert($data,$options); if(false !== $result ) { $insertId = $this->getLastInsID(); if($insertId) { $data[$this->getPk()] = $insertId; $this->_after_insert($data,$options); return $insertId; } } return $result; } protected function _before_insert(&$data,$options) {} protected function _after_insert($data,$options) {} public function selectAdd($fields='',$table='',$options=array()) { $options = $this->_parseOptions($options); if(false === $result = $this->db->selectInsert($fields?$fields:$options['field'],$table?$table:$this->getTableName(),$options)){ $this->error = L('数据库写入失败'); return false; }else { return $result; } } public function save($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('数据渲染失败'); return false; } } $data = $this->_facade($data); $options = $this->_parseOptions($options); if(false === $this->_before_update($data,$options)) { return false; } if(!isset($options['where']) ) { if(isset($data[$this->getPk()])) { $pk = $this->getPk(); $options['where'] = $pk.'=\''.$data[$pk].'\''; $pkValue = $data[$pk]; unset($data[$pk]); }else{ $this->error = L('没有需要更新的条件'); return false; } } $result = $this->db->update($data,$options); if(false !== $result) { if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_update($data,$options); } return $result; } protected function _before_update(&$data,$options) {} protected function _after_update($data,$options) {} public function delete($options=array()) { if(empty($options) && empty($this->options)) { if(!empty($this->data) && isset($this->data[$this->getPk()])) return $this->delete($this->data[$this->getPk()]); else return false; } if(is_numeric($options) || is_string($options)) { $pk = $this->getPk(); if(strpos($options,',')) { $where = $pk.' IN ('.$options.')'; }else{ $where = $pk.'=\''.$options.'\''; $pkValue = $options; } $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $result= $this->db->delete($options); if(false !== $result) { $data = array(); if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_delete($data,$options); } return $result; } protected function _after_delete($data,$options) {} public function select($options=array()) { if(is_string($options) || is_numeric($options)) { $where = $this->getPk().' IN ('.$options.')'; $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->_after_select($resultSet,$options); return $resultSet; } protected function _after_select(&$resultSet,$options) {} public function findAll($options=array()) { return $this->select($options); } public function getFieldAsArray($field='*'){ $options = $this->_parseOptions(array()); $resultSet = $this->db->select($options,'getFieldAsArray',$field); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } return $resultSet; } public function getHashList($hashKey='',$hashValue='*'){ $options = $this->_parseOptions(array()); $resultSet = $this->db->select($options,'getHashList',$hashKey,$hashValue); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } return $resultSet; } private function _parseOptions($options) { if(is_array($options)) $options = array_merge($this->options,$options); $this->options = array(); if(!isset($options['table'])) $options['table'] =$this->getTableName(); if(C('DB_FIELDTYPE_CHECK')) { if(isset($options['where']) && is_array($options['where'])) { foreach ($options['where'] as $key=>$val){ if(in_array($key,$this->fields,true) && is_scalar($val)){ $fieldType = strtolower($this->fields['_type'][$key]); if(false !== strpos($fieldType,'int')) { $options['where'][$key] = intval($val); }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){ $options['where'][$key] = floatval($val); } } } } } $this->_options_filter($options); return $options; } protected function _options_filter(&$options) {} public function find($options=array()) { if(is_numeric($options) || is_string($options)) { $where = $this->getPk().'=\''.$options.'\''; $options = array(); $options['where'] = $where; } $options['limit'] = 1; $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->data = $resultSet[0]; $this->_after_find($this->data,$options); return $this->data; } protected function _after_find(&$result,$options) {} public function setField($field,$value,$condition='') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; if(is_array($field)) { foreach ($field as $key=>$val) $data[$val] = $value[$key]; }else{ $data[$field] = $value; } return $this->save($data,$options); } public function setInc($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'+'.$step),$condition); } public function setDec($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'-'.$step),$condition); } public function getField($field,$condition='',$sepa=' ') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; $options['field'] = $field; $options = $this->_parseOptions($options); if(strpos($field,',')) { $resultSet = $this->db->select($options); if(!empty($resultSet)) { $field = explode(',',$field); $key = array_shift($field); $cols = array(); foreach ($resultSet as $result){ $name = $result[$key]; $cols[$name] = ''; foreach ($field as $val) $cols[$name] .= $result[$val].$sepa; $cols[$name] = substr($cols[$name],0,-strlen($sepa)); } return $cols; } }else{ $options['limit'] = 1; $result = $this->db->select($options); if(!empty($result)) { return reset($result[0]); } } return null; } public function create($data='',$type='') { if(empty($data)) { $data = $_POST; }elseif(is_object($data)){ $data = get_object_vars($data); }elseif(!is_array($data)){ $this->error = L('数据渲染失败'); return false; } $type = $type?$type:(!empty($data[$this->getPk()])?self::MODEL_UPDATE:self::MODEL_INSERT); if(!$this->autoValidation($data,$type)) return false; if(!empty($this->_map)) { foreach ($this->_map as $key=>$val){ if(isset($data[$key])) { $data[$val] = $data[$key]; unset($data[$key]); } } } $vo = array(); foreach ($this->fields as $key=>$name){ if(substr($key,0,1)=='_') continue; $val = isset($data[$name])?$data[$name]:null; if(!is_null($val)){ $vo[$name] = (MAGIC_QUOTES_GPC && is_string($val))? stripslashes($val) : $val; } } $this->autoOperation($vo,$type); $this->data = $vo; return $vo; } public function regex($value,$rule) { $validate = array( 'require'=> '/.+/', 'email' => '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'url' => '/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/', 'currency' => '/^\d+(\.\d+)?$/', 'number' => '/\d+$/', 'zip' => '/^[1-9]\d{5}$/', 'integer' => '/^[-\+]?\d+$/', 'double' => '/^[-\+]?\d+(\.\d+)?$/', 'english' => '/^[A-Za-z]+$/', ); if(isset($validate[strtolower($rule)])) $rule = $validate[strtolower($rule)]; return preg_match($rule,$value)===1; } private function autoOperation(&$data,$type) { if(!empty($this->_auto)) { foreach ($this->_auto as $auto){ if(empty($auto[2])) $auto[2] = self::MODEL_INSERT; if( $type == $auto[2] || $auto[2] == self::MODEL_BOTH) { switch($auto[3]) { case 'function': case 'callback': $args = isset($auto[4])?$auto[4]:array(); if(isset($data[$auto[0]])) { array_unshift($args,$data[$auto[0]]); } if('function'==$auto[3]) { $data[$auto[0]] = call_user_func_array($auto[1], $args); }else{ $data[$auto[0]] = call_user_func_array(array(&$this,$auto[1]), $args); } break; case 'field': $data[$auto[0]] = $data[$auto[1]]; break; case 'string': default: $data[$auto[0]] = $auto[1]; } if(false === $data[$auto[0]] ) unset($data[$auto[0]]); } } } return $data; } private function autoValidation($data,$type) { if(!empty($this->_validate)) { foreach($this->_validate as $key=>$val) { if(empty($val[5]) || $val[5]== self::MODEL_BOTH || $val[5]== $type ) { if(0==strpos($val[2],'{%') && strpos($val[2],'}')) $val[2] = L(substr($val[2],2,-1)); $val[3] = isset($val[3])?$val[3]:self::EXISTS_VAILIDATE; $val[4] = isset($val[4])?$val[4]:'regex'; switch($val[3]) { case self::MUST_VALIDATE: if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } break; case self::VALUE_VAILIDATE: if('' != trim($data[$val[0]])){ if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } } break; default: if(isset($data[$val[0]])){ if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } } } } } } return true; } private function _validationField($data,$val) { switch($val[4]) { case 'function': case 'callback': $args = isset($val[6])?$val[6]:array(); array_unshift($args,$data[$val[0]]); if('function'==$val[4]) { return call_user_func_array($val[1], $args); }else{ return call_user_func_array(array(&$this, $val[1]), $args); } case 'confirm': return $data[$val[0]] == $data[$val[1]]; case 'in': return in_array($data[$val[0]] ,$val[1]); case 'equal': return $data[$val[0]] == $val[1]; case 'unique': if(is_string($val[0]) && strpos($val[0],',')) $val[0] = explode(',',$val[0]); $map = array(); if(is_array($val[0])) { foreach ($val[0] as $field) $map[$field] = $data[$field]; }else{ $map[$val[0]] = $data[$val[0]]; } if($this->where($map)->find()) return false; break; case 'regex': default: return $this->regex($data[$val[0]],$val[1]); } return true; } public function query($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->query($sql); }else{ return false; } } public function execute($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->execute($sql); }else { return false; } } public function getModelName() { if(empty($this->name)) $this->name = substr(get_class($this),0,-5); return $this->name; } public function getTableName($name='') { if(!empty($name)){ return $this->tablePrefix.$name; } if(empty($this->trueTableName)) { $tableName = !empty($this->tablePrefix) ? $this->tablePrefix : ''; if(!empty($this->tableName)) { $tableName .= $this->tableName; }else{ $tableName .= parse_name($this->name); } $tableName .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; if(!empty($this->dbName)) $tableName = $this->dbName.'.'.$tableName; $this->trueTableName = strtolower($tableName); } return $this->trueTableName; } public function startTrans() { $this->commit(); $this->db->startTrans(); return ; } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getError(){ if(empty($this->error)){ return 'error'; } return $this->error; } public function getDbError() { return $this->db->error(); } public function getLastInsID() { return $this->db->lastInsID; } public function getLastSql() { return $this->db->getLastSql(); } public function getPk() { return isset($this->fields['_pk'])?$this->fields['_pk']:$this->pk; } public function getDbFields(){ return $this->fields; } public function data($data){ if(is_object($data)){ $data = get_object_vars($data); }elseif(!is_array($data)){ throw_exception(L('_DATA_TYPE_INVALID_')); } $this->data = $data; return $this; } public function join($join) { if(is_array($join)) $this->options['join'] = $join; else $this->options['join'][] = $join; return $this; } public function setProperty($name,$value) { if(property_exists($this,$name)) $this->$name = $value; return $this; } public function count($options = array(),$field='1') { $fields = 'count('.$field.') as count'; $options['limit'] = 1; $options['field'] = $fields; $options = $this->_parseOptions($options); if($result = $this->db->select($options)) { return $result[0]['count']; }else{ return false; } } public function findPage($pageopt,$count=false,$options=array()) { $options = $this->_parseOptions($options); if($count===false){ $count_options = $options; $count_options['limit'] = 1; $count_options['field'] = 'count(1) as count'; unset($count_options['order']); $result = $this->db->select($count_options); $count = $result[0]['count']; unset($result); unset($count_options); } if($count > 0) { if( is_numeric($pageopt) ) { $pagesize = intval($pageopt); }else{ $pagesize = intval(C('LIST_NUMBERS')); } $p = new Page($count,$pagesize); $options['limit'] = $p->firstRow.','.$p->listRows; $resultSet = $this->select($options); if($resultSet){ $this->dataList = $resultSet; }else{ $resultSet = ''; } $output['count'] = $count; $output['totalPages'] = $p->totalPages; $output['totalRows'] = $p->totalRows; $output['nowPage'] = $p->nowPage; $output['html'] = $p->show(); $output['data'] = $resultSet; unset($resultSet); unset($p); unset($count); }else{ $output['count'] = 0; $output['totalPages'] = 0; $output['totalRows'] = 0; $output['nowPage'] = 1; $output['html'] = ''; $output['data'] = ''; } return $output; } public function findPageBySql($sql, $count = null, $pagesize = null) { if ( !is_numeric($count) || $count == null) { $count_sql = explode(' FROM ', $sql); if (count($count_sql) != 2) return false; $count_sql = 'SELECT count(*) AS count FROM ' . $count_sql[1]; $count = $this->db->query($count_sql); $count = $count[0]['count']; } $count = intval($count); if ($count > 0) { $pagesize = is_numeric($pagesize) ? intval($pagesize) : intval(C('LIST_NUMBERS')); $p = new Page($count,$pagesize); $limit = $p->firstRow.','.$p->listRows; $resultSet = $this->query($sql . ' LIMIT ' . $limit); if($resultSet){ $this->dataList = $resultSet; }else{ $resultSet = ''; } $output['count'] = $count; $output['totalPages'] = $p->totalPages; $output['totalRows'] = $p->totalRows; $output['nowPage'] = $p->nowPage; $output['html'] = $p->show(); $output['data'] = $resultSet; unset($resultSet); unset($p); unset($count); }else { $output['count'] = 0; $output['totalPages'] = 0; $output['totalRows'] = 0; $output['nowPage'] = 1; $output['html'] = ''; $output['data'] = ''; } return $output; } public function executeSqlFile($file,$stop = true,$db_charset = 'utf-8') { if (!is_readable($file)) { $error = array( 'error_code' => 'SQL文件不可读', 'error_sql' => '', ); return $error; } $fp = fopen($file, 'rb'); $sql = fread($fp, filesize($file)); fclose($fp); $sql = str_replace("\r", "\n", str_replace('`'.'ts_', '`'.$this->tablePrefix, $sql)); foreach (explode(";\n", trim($sql)) as $query) { $query = trim($query); if($query) { if(substr($query, 0, 12) == 'CREATE TABLE') { $db_charset = (strpos($db_charset, '-') === FALSE) ? $db_charset : str_replace('-', '', $db_charset); $type = strtoupper(preg_replace("/^\s*CREATE TABLE\s+.+\s+\(.+?\).*(ENGINE|TYPE)\s*=\s*([a-z]+?).*$/isU", "\\2", $query)); $type = in_array($type, array("MYISAM", "HEAP")) ? $type : "MYISAM"; $_temp_query = preg_replace("/^\s*(CREATE TABLE\s+.+\s+\(.+?\)).*$/isU", "\\1", $query). (mysql_get_server_info() > "4.1" ? " ENGINE=$type DEFAULT CHARSET=$db_charset" : " TYPE=$type"); $res = $this->execute($_temp_query); }else { $res = $this->execute($query); } if($res === false) { $error[] = array( 'error_code' => $this->getDbError(), 'error_sql' => $query, ); if($stop) return $error[0]; } } } return $error; } }; $GLOBALS['_beginTime'] = microtime(TRUE); !defined('MEMORY_LIMIT_ON') && define('MEMORY_LIMIT_ON',function_exists('memory_get_usage')); if (get_magic_quotes_gpc()) { $_GET = stripslashes_deep( $_GET ); $_POST = stripslashes_deep( $_POST ); $_COOKIE = stripslashes_deep( $_COOKIE ); } check_gpc($_GET); check_gpc($_POST); check_gpc($_COOKIE); $_REQUEST = array_merge($_GET,$_POST); if(isset($_REQUEST['os']) && !isset($_REQUEST['app'])){ $qm['_os'] = $_REQUEST['os']; }else{ $qm['_app'] = isset($_REQUEST['app']) && !empty($_REQUEST['app'])?$_REQUEST['app']:'index'; $qm['_mod'] = isset($_REQUEST['mod']) && !empty($_REQUEST['mod'])?$_REQUEST['mod']:'Index'; $qm['_act'] = isset($_REQUEST['act']) && !empty($_REQUEST['act'])?$_REQUEST['act']:'index'; } qmdefine('APP_NAME' , $qm['_app']); qmdefine('TRUE_APPNAME',!empty($qm['_widget_appname']) ? $qm['_widget_appname']:APP_NAME); qmdefine('MODULE_NAME' , $qm['_mod']); qmdefine('ACTION_NAME' , $qm['_act']); qmdefine('MODULE_CODE' , $qm['_app'].'/'.$qm['_mod']); qmdefine('ACTION_CODE' , $qm['_app'].'/'.$qm['_mod'].'/'.$qm['_act']); qmdefine('APP_RUN_PATH' , CORE_RUN_PATH.'/~'.TRUE_APPNAME); qmdefine('APP_PATH' , APPS_PATH.'/'.TRUE_APPNAME); qmdefine('APP_URL' , SITE_URL.'/apps/'.TRUE_APPNAME); qmdefine('APP_LIB_PATH' , APP_PATH.'/'); qmdefine('APP_ACTION_PATH' , APP_PATH); qmdefine('THEME_PATH' , ADDON_PATH.'/theme'); qmdefine('THEME_URL' , ADDON_URL.'/theme'); qmdefine('THEME_PUBLIC_PATH', THEME_PATH.'/_stastic'); qmdefine('THEME_PUBLIC_URL' , THEME_URL.'/_stastic'); qmdefine('APP_PUBLIC_URL' , THEME_PUBLIC_URL.'/'.TRUE_APPNAME); qmdefine('APP_TPL_PATH' , THEME_PATH.'/'.TRUE_APPNAME); qmconfig(include CONF_PATH.'/conv.inc.php'); qmconfig(include CONF_PATH.'/config.inc.php'); qmload(CORE_LIB_PATH.'/functions.inc.php'); qmload(CORE_LIB_PATH.'/Think.class.php'); qmload(CORE_LIB_PATH.'/App.class.php'); qmload(CORE_LIB_PATH.'/Action.class.php'); qmload(CORE_LIB_PATH.'/Widget.class.php'); if(C('APP_TPL_PATH')){ qmdefine('APP_TPL_PATH', C('APP_TPL_PATH')); } if(C('DEPLOY_STASTIC')){ qmdefine('THEME_PUBLIC_URL' , PUBLIC_URL); qmdefine('APP_PUBLIC_URL' , THEME_PUBLIC_URL.'/'.TRUE_APPNAME); } Session::start(); function cookie($name,$value='',$option=null, $http_only=1) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!empty($option)) { if (is_numeric($option)) { $option = array('expire'=>$option); }else if( is_string($option) ) { parse_str($option,$option); } $config = array_merge($config,array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value)? $config['prefix'] : $value; if (!empty($prefix)) { foreach($_COOKIE as $key=>$val) { if (0 === stripos($key,$prefix)){ setcookie($_COOKIE[$key],'',time()-3600,$config['path'],$config['domain'],'',$http_only); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'].$name; if (''===$value){ return isset($_COOKIE[$name]) ? ($_COOKIE[$name]) : null; }else { if (is_null($value)) { setcookie($name,'',time()-3600,$config['path'],$config['domain']); unset($_COOKIE[$name]); }else { $expire = !empty($config['expire'])&&$config['expire']>0? time()+ intval($config['expire']) :$config['expire']; setcookie($name,$value,$expire,$config['path'],$config['domain'],'',$http_only); } } } function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } function parse_name($name,$type=0) { if($type) { return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); }else{ $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } function dump($var, $return=false) { ob_start(); var_dump($var); $output = ob_get_clean(); $output = str_replace(SITE_PATH, '[SITE_PATH]', $output); if(!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre style="text-align:left">'. htmlspecialchars($output, ENT_QUOTES). '</pre>'; } if (!$return) { echo '<pre style="text-align:left">'; echo($output); echo '</pre>'; }else return $output; } function throw_exception($msg,$type='') { if(defined('IS_CGI') && IS_CGI) exit($msg); $msg = str_replace(SITE_PATH, '[SITE_PATH]', $msg); if(!C('DEV_MOD')){ Log::write($msg,'ERR'); header("Location:".SITE_URL);exit(); } if(class_exists($type,false)) throw new $type($msg,$code,true); else die($msg); } function halt($text) { return dump($text); } function file_exists_case($filename) { if(is_file($filename)) { if(IS_WIN && C('APP_FILE_CASE')) { if(basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); }elseif(is_resource($mix)){ $mix = get_resource_type($mix).strval($mix); }else{ $mix = serialize($mix); } return md5($mix); } function get_instance_of($name,$method='',$args=array()) { static $_instance = array(); $identify = empty($args)?$name.$method:$name.$method.to_guid_string($args); if (!isset($_instance[$identify])) { if(class_exists($name)){ $o = new $name(); if(method_exists($o,$method)){ if(!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); }else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$name); } return $_instance[$identify]; } function __autoload($name) { if(import($name)) return ; if(substr($name,-5)=="Model") { import(LIB_PATH.'Model/'.ucfirst($name).'.class.php'); }elseif(substr($name,-6)=="Action"){ import(LIB_PATH.'Action/'.ucfirst($name).'.class.php'); }else { if(C('APP_AUTOLOAD_PATH')) { $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'/'.$name.'.class.php')) { return ; } } } } return ; } function import($filename) { static $_importFiles = array(); global $qm; if (!isset($_importFiles[$filename])) { if(file_exists($filename)){ qmload($filename); $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function C($name=null,$value=null) { global $qm; if(empty($name)) return $qm['_config']; if (is_string($name)) { if (!strpos($name,'.')) { $name = strtolower($name); if (is_null($value)) return isset($qm['_config'][$name])? $qm['_config'][$name] : null; $qm['_config'][$name] = $value; return; } $name = explode('.',$name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($qm['_config'][$name[0]][$name[1]]) ? $qm['_config'][$name[0]][$name[1]] : null; $qm['_config'][$name[0]][$name[1]] = $value; return; } if(is_array($name)) return $qm['_config'] = array_merge((array)$qm['_config'],array_change_key_case($name)); return null;} function D($name='',$app='@') { static $_model = array(); if(empty($name)) return new Model; if(empty($app) || $app=='@') $app = APP_NAME; $names = explode('_',$name); $name = ''; foreach($names as $v){ $name .= ucfirst($v); } if(isset($_model[$app.$name])) return $_model[$app.$name]; $OriClassName = $name; $className = $name.'Model'; if(file_exists(ADDON_PATH.'/model/'.$className.'.class.php')){ qmload(ADDON_PATH.'/model/'.$className.'.class.php'); }elseif(file_exists(APPS_PATH.'/'.$app.'/Model/'.$className.'.class.php')){ $common = APPS_PATH.'/'.$app.'/Common/common.php'; if(file_exists($common)){ qmload($common); } qmload(APPS_PATH.'/'.$app.'/Model/'.$className.'.class.php'); } if(class_exists($className)) { $model = new $className(); }else{ $model = new Model($name); } $_model[$app.$OriClassName] = $model; return $model; } function A($name,$app='@') { static $_action = array(); if(empty($app) || $app=='@') $app = APP_NAME; if(isset($_action[$app.$name])) return $_action[$app.$name]; $OriClassName = $name; $className = $name.'Action'; qmload(APP_ACTION_PATH.'/'.$className.'.class.php'); if(class_exists($className)) { $action = new $className(); $_action[$app.$OriClassName] = $action; return $action; }else { return false; } } function L($key,$data = array()){ $key = strtoupper($key); if(!isset($GLOBALS['_lang'][$key])){ return $key; } if(empty($data)){ return $GLOBALS['_lang'][$key]; } $replace = array_keys($data); foreach($replace as &$v){ $v = "{".$v."}"; } return str_replace($replace,$data,$GLOBALS['_lang'][$key]); } function t($text, $sql=false){ $text = str_replace(array('&nbsp;','=',"'",'"','onmousever','prompt'), '', $text); $text = htmlspecialchars_decode($text); $text = trim(strip_tags($text)); $text = stripslashes($text); $text = htmlspecialchars($text, ENT_QUOTES, 'UTF-8'); return $text; } function ej($info,$json = true){ if($GLOBALS['TEST'] == 1){ return $info; }else{ echo $json ? json_encode($info) : $info; exit(); } } function h($text,$type='html'){ $text_tags = ''; $font_tags = '<i><b><u><s><em><strong><font><big><small><sup><sub><bdo><h1><h2><h3><h4><h5><h6>'; $base_tags = $font_tags.'<p><br><hr><a><img><map><area><pre><code><q><blockquote><acronym><cite><ins><del><center><strike>'; $html_tags = $base_tags.'<form><input><textarea><button><select><optgroup><option><label><fieldset><legend><ul><ol><li><dl><dd><dt><table><caption><td><th><tr><thead><tbody><tfoot><col><colgroup><div><span><object><embed>'; $all_tags = $form_tags.$html_tags.'<!DOCTYPE><html><head><title><body><base><basefont><script><noscript><applet><object><param><style><frame><frameset><noframes><iframe>'; $text = strip_tags($text, ${$type.'_tags'} ); if($type!='all'){ while(preg_match('/(<[^><]+) (onclick|onload|unload|onmouseover|onmouseup|onmouseout|onmousedown|onkeydown|onkeypress|onkeyup|onblur|onchange|onfocus|action|background|codebase|dynsrc|lowsrc)([^><]*)/i',$text,$mat)){ $text = str_ireplace($mat[0],$mat[1].$mat[3],$text); } while(preg_match('/(<[^><]+)(window\.|javascript:|js:|about:|file:|document\.|vbs:|cookie)([^><]*)/i',$text,$mat)){ $text = str_ireplace($mat[0],$mat[1].$mat[3],$text); } } return $text; } function U($url,$params=false,$redirect=false,$suffix=true) { if(false==strpos($url,'/')){ $url .='//'; } $urls = explode('/',$url); $app = isset($urls[0]) && !empty($urls[0]) ? $urls[0] : APP_NAME; $mod = isset($urls[1]) && !empty($urls[1]) ? $urls[1] : 'Index'; $act = isset($urls[2]) && !empty($urls[2]) ? $urls[2] : 'index'; $site_url = SITE_URL.'/index.php?app='.$app.'&mod='.$mod.'&act='.$act; if($params){ if(is_array($params)){ $params = http_build_query($params); $params = urldecode($params); } $params = str_replace('&amp;','&',$params); $site_url .= '&'.$params; } if(C('URL_ROUTER_ON')){ $router_ruler = C('router'); $router_key = $app.'/'.ucfirst($mod).'/'.$act; if(isset($router_ruler[$router_key])){ if(false==strpos($router_ruler[$router_key],'://')){ $site_url = SITE_URL.'/'.$router_ruler[$router_key]; }else{ $site_url = $router_ruler[$router_key]; } if($params){ parse_str($params,$r); foreach($r as $k=>$v){ if(strpos($site_url,'['.$k.']')){ $site_url = str_replace('['.$k.']',$v,$site_url); }else{ $lr[$k] = $v; } } if(is_array($lr) && count($lr)>0){ $site_url .= '?'.http_build_query($lr); } } } } if($redirect){ redirect($site_url); }else{ return $site_url; } } function redirect($url,$time=0,$msg='') { $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) $msg = L('PUBLIC_SYSTEM_JUMP_TO',array('time'=>$time,'url'=>$url)); if (!headers_sent()) { if(0===$time) { header("Location: ".$url); }else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) $str .= $msg; exit($str); } } function S($name,$value='',$expire=null) { static $_cache = array(); $cache = model('Cache'); if('' !== $value) { if(is_null($value)) { $result = $cache->rm($name); if($result) unset($_cache[$name]); return $result; }else{ $cache->set($name,$value,$expire); $_cache[$name] = $value; } return true; } if(isset($_cache[$name])) return $_cache[$name]; $value = $cache->get($name); $_cache[$name] = $value; return $value; } function F($name,$value='',$path=false) { static $_cache = array(); if(!$path) { $path = C('F_CACHE_PATH'); } if(!is_dir($path)) { mkdir($path,0777,true); } $filename = $path.'/'.$name.'.php'; if('' !== $value) { if(is_null($value)) { return unlink($filename); }else{ $dir = dirname($filename); if(!is_dir($dir)) mkdir($dir,0777,true); return @file_put_contents($filename,"<?php\nreturn ".var_export($value,true).";\n?>"); } } if(isset($_cache[$name])) return $_cache[$name]; if(is_file($filename)) { $value = include $filename; $_cache[$name] = $value; }else{ $value = false; } return $value; } function lunar($date){ $lunar = new Lunar(); return $lunar->S2L($date); } function festival($date){ $temp=$f_lunar=$f_solar=''; $lunar_cls = new Lunar(); $nl_date = date("Y-m-d",$lunar_cls->S2LD($date)); $arr_lunar=array('01-01'=>'春节','01-15'=>'元宵节','05-05'=>'端午节','07-07'=>'七夕情人节','08-15'=>'中秋节','09-09'=>'重阳节'); $arr_solar=array('01-01'=>'元旦','02-14'=>'情人节','03-08'=>'妇女节','03-12'=>'植树节','04-01'=>'愚人节','04-08'=>'复活节','05-01'=>'劳动节','05-04'=>'青年节','05-12'=>'护士节','05-31'=>'无烟日','06-01'=>'儿童节','07-01'=>'建党节','08-01'=>'建军节','09-10'=>'教师节','10-01'=>'国庆节','10-31'=>'万圣节','12-24'=>'平安夜','12-25'=>'圣诞节'); $md_lunar=substr_replace($nl_date,'',0,5); $md_solar=substr_replace($date,'',0,5); $f_lunar=$arr_lunar[$md_lunar]; $f_solar=$arr_solar[$md_solar]; if(!empty($f_lunar) && !empty($f_solar)){$temp='/';} return trim($f_lunar.$temp.$f_solar); } function S2LDATE($date){ $lunar = new Lunar(); return $lunar->S2LDATE($date); } function model($name,$params=array()) { return X($name,$params,'Model'); } function X($name,$params=array(),$domain='Model') { static $_service = array(); $app = TRUE_APPNAME; if(isset($_service[$domain.'_'.$app.'_'.$name])) return $_service[$domain.'_'.$app.'_'.$name]; $class = $name.$domain; if(file_exists(APPS_PATH.'/'.$app.'/'.$domain.'/'.$class.'.class.php')){ qmload(APPS_PATH.'/'.$app.'/'.$domain.'/'.$class.'.class.php'); }else{ qmload(ADDON_PATH.'/'.strtolower($domain).'/'.$class.'.class.php'); } if(class_exists($class)){ $obj = new $class($params); $_service[$domain.'_'.$app.'_'.$name] = $obj; return $obj; }else{ throw_exception(L('_CLASS_NOT_EXIST_').':'.$class); } } function fetch($templateFile='',$tvar=array(),$charset='utf-8',$contentType='text/html',$display=false) { global $qm; $tvar['qm'] = $qm; if(null===$templateFile) return ; if(empty($charset)) $charset = C('DEFAULT_CHARSET'); header("Content-Type:".$contentType."; charset=".$charset); header("Cache-control: private"); ob_start(); ob_implicit_flush(0); if(''==$templateFile){ $templateFile = APP_TPL_PATH.'/'.MODULE_NAME.'/'.ACTION_NAME.'.html'; }elseif(file_exists(APP_TPL_PATH.'/'.MODULE_NAME.'/'.$templateFile.'.html')) { $templateFile = APP_TPL_PATH.'/'.MODULE_NAME.'/'.$templateFile.'.html'; }elseif(file_exists($templateFile)){ }else{ throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } $templateCacheFile = C('TMPL_CACHE_PATH').'/'.qm_md5($templateFile).'.php'; if(!$qm['_debug'] && file_exists($templateCacheFile)) { extract($tvar, EXTR_OVERWRITE); include $templateCacheFile; }else{ qmhook('tpl_compile',array('templateFile',$templateFile)); $tpl = Template::getInstance(); $tpl->load($templateFile,$tvar,$charset); } $content = ob_get_clean(); $replace = array( '__ROOT__' => SITE_URL, '__UPLOAD__' => UPLOAD_URL, '__PUBLIC__' => PUBLIC_URL, '__THEME__' => THEME_PUBLIC_URL, '__APP__' => APP_PUBLIC_URL, ); if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $replace['{__TOKEN__}'] = $this->buildFormToken(); }elseif(strpos($content,'{__NOTOKEN__}')){ $replace['{__NOTOKEN__}'] = ''; }elseif(preg_match('/<\/form(\s*)>/is',$content,$match)) { $replace[$match[0]] = $this->buildFormToken().$match[0]; } } if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); if($display) echo $content; else return $content; } function display($templateFile='',$tvar=array(),$charset='utf-8',$contentType='text/html') { fetch($templateFile,$tvar,$charset,$contentType,true); } function mk_dir($dir) { if (is_dir($dir) || mkdir($dir,0666,true)) return true; if (!mk_dir(dirname($dir),0666)) return false; return mkdir($dir,0666,true); } function byte_format($size, $dec=2) { $a = array("B", "KB", "MB", "GB", "TB", "PB"); $pos = 0; while ($size >= 1024) { $size /= 1024; $pos++; } return round($size,$dec)." ".$a[$pos]; } function get_client_ip() { if( isset($GLOBALS['user_ip']) ){ return $GLOBALS['user_ip']; } if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) $ip = getenv("HTTP_CLIENT_IP"); else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) $ip = getenv("REMOTE_ADDR"); else if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) $ip = $_SERVER['REMOTE_ADDR']; else $ip = "unknown"; if($ip != "unknown"){ $preg = "/\A((([0-9]?[0-9])|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.){3}(([0-9]?[0-9])|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\Z/"; !preg_match($preg,$ip) && $ip = 'errorIp'; } $GLOBALS['user_ip'] = $ip; return($ip); } function LogRecord($group,$action,$data){ static $log = null; if($log == null){ $log = model('Logs'); } return $log->load($group)->action($action)->record($data); } function getSubByKey($pArray, $pKey=""){ $result = array(); if(!is_array($pArray)){ return $result; } foreach($pArray as $temp_array){ if(is_object($temp_array)){ $temp_array = (array) $temp_array; } $result[] = (""==$pKey) ? $temp_array : isset($temp_array[$pKey]) ? $temp_array[$pKey] : ""; } return $result; } function get_str_length($str, $filter = false) { if ($filter) { $str = html_entity_decode($str, ENT_QUOTES); $str = strip_tags($str); } return (strlen($str) + mb_strlen($str, 'UTF8')) / 4; } function getShort($str, $length = 40, $ext = '') { $str = htmlspecialchars($str); $str = strip_tags($str); $str = htmlspecialchars_decode($str); $strlenth = 0; $out = ''; preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/", $str, $match); foreach($match[0] as $v){ preg_match("/[\xe0-\xef][\x80-\xbf]{2}/",$v, $matchs); if(!empty($matchs[0])){ $strlenth += 1; }elseif(is_numeric($v)){ $strlenth += 0.5; }else{ $strlenth += 0.5; } if ($strlenth > $length) { $output .= $ext; break; } $output .= $v; } return $output; } function is_utf8($string) { return preg_match('%^(?:
         [\x09\x0A\x0D\x20-\x7E]            # ASCII
       | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
       |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
       | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
       |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
       |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
       | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
       |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
   )*$%xs', $string); } function auto_charset($fContents,$from,$to){ $from = strtoupper($from)=='UTF8'? 'utf-8':$from; $to = strtoupper($to)=='UTF8'? 'utf-8':$to; if( strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents)) ){ return $fContents; } if(is_string($fContents) ) { if(function_exists('mb_convert_encoding')){ return mb_convert_encoding ($fContents, $to, $from); }elseif(function_exists('iconv')){ return iconv($from,$to,$fContents); }else{ return $fContents; } } elseif(is_array($fContents)){ foreach ( $fContents as $key => $val ) { $_key = auto_charset($key,$from,$to); $fContents[$_key] = auto_charset($val,$from,$to); if($key != $_key ) unset($fContents[$key]); } return $fContents; } else{ return $fContents; } } function friendlyDate($sTime, $format=''){ if(empty($sTime)) return ''; $cTime = time(); $dTime = $cTime - $sTime; if($dTime > 0 && $dTime < 60 ){ return $dTime . ' ' . '秒前'; } else if($dTime > 0 && $dTime < 3600 ){ return intval($dTime/60) . ' ' . '分前'; } else { if( 'Ymd' == $format){ $time_format = array( 'en' => 'M d,Y', 'zh-cn' => 'Y-m-d', 'zh-tw' => 'Y-m-d' ); }else{ $time_format = array( 'en' => 'M d,Y H:i', 'zh-cn' => 'Y-m-d H:i', 'zh-tw' => 'Y-m-d H:i' ); } $lang_set = 'zh-cn'; $format = $time_format[$lang_set]; return date($format, $sTime); } } function filter_keyword($html){ static $audit =null; static $auditSet = null; if($audit == null){ $audit = model('Xdata')->get('keywordConfig'); $audit = explode(',',$audit); $auditSet = model('Xdata')->get('admin_Config:audit'); } if(empty($audit) || $auditSet['open'] == '0'){ return $html; } return str_replace($audit, $auditSet['replace'], $html); } function pkcs5_pad($text, $blocksize) { $pad = $blocksize - (strlen($text) % $blocksize); return $text . str_repeat(chr($pad), $pad); } function pkcs5_unpad($text) { $pad = ord($text{strlen($text)-1}); if ($pad > strlen($text)) return false; if (strspn($text, chr($pad), strlen($text) - $pad) != $pad) return false; return substr($text, 0, -1 * $pad); } function getFirstLetter($s0) { $firstchar_ord = ord(strtoupper($s0{0})); if($firstchar_ord >= 65 and $firstchar_ord <= 91) return strtoupper($s0{0}); if($firstchar_ord >= 48 and $firstchar_ord <= 57) return '#'; $s = iconv("UTF-8", "gb2312", $s0); $asc = ord($s{0}) * 256 + ord($s{1}) - 65536; if($asc>=-20319 and $asc<=-20284) return "A"; if($asc>=-20283 and $asc<=-19776) return "B"; if($asc>=-19775 and $asc<=-19219) return "C"; if($asc>=-19218 and $asc<=-18711) return "D"; if($asc>=-18710 and $asc<=-18527) return "E"; if($asc>=-18526 and $asc<=-18240) return "F"; if($asc>=-18239 and $asc<=-17923) return "G"; if($asc>=-17922 and $asc<=-17418) return "H"; if($asc>=-17417 and $asc<=-16475) return "J"; if($asc>=-16474 and $asc<=-16213) return "K"; if($asc>=-16212 and $asc<=-15641) return "L"; if($asc>=-15640 and $asc<=-15166) return "M"; if($asc>=-15165 and $asc<=-14923) return "N"; if($asc>=-14922 and $asc<=-14915) return "O"; if($asc>=-14914 and $asc<=-14631) return "P"; if($asc>=-14630 and $asc<=-14150) return "Q"; if($asc>=-14149 and $asc<=-14091) return "R"; if($asc>=-14090 and $asc<=-13319) return "S"; if($asc>=-13318 and $asc<=-12839) return "T"; if($asc>=-12838 and $asc<=-12557) return "W"; if($asc>=-12556 and $asc<=-11848) return "X"; if($asc>=-11847 and $asc<=-11056) return "Y"; if($asc>=-11055 and $asc<=-10247) return "Z"; return '#'; } function getStringList($str){ preg_match_all("/./us", $str, $match); return $match[0]; } function debug_start($label='') { $GLOBALS[$label]['_beginTime'] = microtime(TRUE); $GLOBALS[$label]['_beginMem'] = memory_get_usage(); } function debug_end($label='') { $GLOBALS[$label]['_endTime'] = microtime(TRUE); $log = 'Process '.$label.': Times '.number_format($GLOBALS[$label]['_endTime']-$GLOBALS[$label]['_beginTime'],6).'s '; $GLOBALS[$label]['_endMem'] = memory_get_usage(); $log .= ' Memories '.number_format(($GLOBALS[$label]['_endMem']-$GLOBALS[$label]['_beginMem'])/1024).' k'; $GLOBALS['logs'][$label] = $log; } function getAttachInfo($attach_ids) { if(empty($attach_ids)) { return array(); } $map['attach_id'] = array('IN', $attach_ids); $data = model('Attach')->where($map)->getHashList('attach_id'); return $data; } function exportExcel($data, $filename){ qmload ( ADDON_PATH.'/liberary/phpExcel/excel/WCExcel.php' ); $filename = getShort($filename, 30); $excel = new WCExcel(); mkdir( DATA_PATH . '/export', 0777); $file = DATA_PATH . '/export/'.$filename.'.xls'; $res = $excel->export($data, $filename, $file); $res_url = SITE_URL.'/data/export/'.$filename.'.xls'; redirect($res_url); } function setAttachInfo($attachInfo, $data) { if(empty($attachInfo) || empty($data)) { return $data; } $attach_ids = array(); !empty($data['attach']) && $attach_ids = explode(',', $data['attach']); if(!empty($attach_ids)) { foreach($attach_ids as $value) { $data['attachInfo'][] = $attachInfo[$value]; } } return $data; } function download($file,$file_name){ $file_path =''; $filename = ''; if (is_numeric($file)) { $attach = model('Attach')->getDetail($file); if(!$attach){ echo '附件不存在'; return false; } $file_path = UPLOAD_PATH . '/' .$attach['save_path'] . $attach['save_name']; $filename = $attach['name']; }else{ $file_path = $file; $filename = $file_name; } qmload(ADDON_PATH.'/liberary/Http.class.php'); if(file_exists($file_path)) { if(strpos($_SERVER['HTTP_USER_AGENT'],'MSIE')){ $filename = urlencode($filename); } Http::download($file_path, $filename); }else{ echo '文件不存在'; return false; } } function getImageSrcFromHtml( $content ){ if(empty($content)) return false; $doc = new DOMDocument(); @$doc->loadHTML($content); $tags = $doc->getElementsByTagName('img'); foreach ($tags as $tag) { $image_src[] = $tag->getAttribute('src'); } return $image_src; } function getImageAllowType(){ return array( 'self', 'thumb_1024_786', 'thumb_100_100', 'thumb_50_50', 'thumb_425_5000', 'thumb_570_5000', 'thumb_710_5000', 'thumb_5000_5000', 'thumb_200_200', 'cut_200_200', 'cut_160_160', 'cut_100_100', 'cut_120_120', 'cut_50_50', 'cut_20_20', 'cut_140_140', 'cut_64_64', 'cut_400_248' ); } function compile($filename,$runtime=false) { $content = file_get_contents($filename); if(true === $runtime) $content = substr(trim($content),5); if('?>' == substr($content,-2)) $content = substr($content,0,-2); return $content; } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all ($content); $last_space = false; for ($i = 0, $j = count ($tokens); $i < $j; $i++) { if (is_string ($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function array_define($array) { $content = ''; foreach($array as $key=>$val) { $key = strtoupper($key); if(is_int($val) || is_float($val)) { $content .= "qmdefine('".$key."',".$val.");"; }elseif(is_bool($val)) { $val = ($val)?'true':'false'; $content .= "qmdefine('".$key."',".$val.");"; }elseif(is_string($val)) { $content .= "qmdefine('".$key."','".addslashes($val)."');"; } } return $content; } function json_to_array($json_data){ $arr = (array) json_decode($json_data); foreach($arr as &$v){ if(is_object($v)){ $v=(array)($v); } } return $arr; } function sortByCol($array, $keyname, $dir = SORT_ASC) { return sortByMultiCols ( $array, array ($keyname => $dir ) ); } function sortByMultiCols($rowset, $args) { $sortArray = array (); $sortRule = ''; foreach ( $args as $sortField => $sortDir ) { foreach ( $rowset as $offset => $row ) { $sortArray [$sortField] [$offset] = (int) $row [$sortField]; } $sortRule .= '$sortArray[\'' . $sortField . '\'], ' . $sortDir . ', '; } if (empty ( $sortArray ) || empty ( $sortRule )) { return $rowset; } eval ( 'array_multisort(' . $sortRule . '$rowset);' ); return $rowset; } function isValidEmail($email) { return preg_match('/[_a-zA-Z\d\-\.]+(@[_a-zA-Z\d\-]+\.[_a-zA-Z\d\-]+)+(\.[_a-zA-Z\d\-]+)*$/i', $email); } function showImage($file_path,$ext = 'jpg'){ $chrono = filemtime($file_path); $offset = 60 * 60 * 24 * 7; header ( "cache-control: private" ); header ( "cache-control: max-age=".$offset ); header('Last-Modified: '.gmdate(' D,d M Y H:i:s',$chrono).' GMT',true,200); header ( "Pragma: max-age=".$offset ); header ( "Expires:" . gmdate ( "D, d M Y H:i:s", time () + $offset ) . " GMT" ); set_cache_limit($offset); header ( "Content-type: image/" . $ext); readfile( $file_path ); } function set_cache_limit($second=1) { $second=intval($second); if($second==0) { return; } $id = $_SERVER['HTTP_IF_NONE_MATCH']; $etag=time()."||".base64_encode( $_SERVER['REQUEST_URI'] ); if( $id=='' ) { header("Etag:$etag",true,200); return; } list( $time , $uri )=explode ( "||" , $id ); if($time < (time()-$second)) { header("Etag:$etag",true,200); }else { header("Etag:$id",true,304); exit(-1); } } function highlight($string,$keywords = ''){ if(empty($keywords)){ return $string; } return preg_replace("/($keywords)/si",'<em>$1</em>',$string); } function jiami($txt, $key = null) { if (empty ( $key )) $key = 'cofco_oam'; $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=_"; $nh = rand ( 0, 64 ); $ch = $chars [$nh]; $mdKey = md5 ( $key . $ch ); $mdKey = substr ( $mdKey, $nh % 8, $nh % 8 + 7 ); $txt = base64_encode ( $txt ); $tmp = ''; $i = 0; $j = 0; $k = 0; for($i = 0; $i < strlen ( $txt ); $i ++) { $k = $k == strlen ( $mdKey ) ? 0 : $k; $j = ($nh + strpos ( $chars, $txt [$i] ) + ord ( $mdKey [$k ++] )) % 64; $tmp .= $chars [$j]; } return str_replace('=','.',$ch . $tmp); } function jiemi($txt, $key = null) { $txt = str_replace('.','=',$txt); if (empty ( $key )) $key = 'cofco_oam'; $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=_"; $ch = $txt [0]; $nh = strpos ( $chars, $ch ); $mdKey = md5 ( $key . $ch ); $mdKey = substr ( $mdKey, $nh % 8, $nh % 8 + 7 ); $txt = substr ( $txt, 1 ); $tmp = ''; $i = 0; $j = 0; $k = 0; for($i = 0; $i < strlen ( $txt ); $i ++) { $k = $k == strlen ( $mdKey ) ? 0 : $k; $j = strpos ( $chars, $txt [$i] ) - $nh - ord ( $mdKey [$k ++] ); while ( $j < 0 ) $j += 64; $tmp .= $chars [$j]; } return base64_decode ( $tmp ); } function list_sort_by($list,$field, $sortby='asc') { if(is_array($list)){ $refer = $resultSet = array(); foreach ($list as $i => $data) $refer[$i] = &$data[$field]; switch ($sortby) { case 'asc': asort($refer); break; case 'desc': arsort($refer); break; case 'nat': natcasesort($refer); break; } foreach ( $refer as $key=> $val) $resultSet[] = &$list[$key]; return $resultSet; } return false; } function wDate($config){ $default = array('mod'=>'Ymd','name'=>'rcalendar','id'=>'rcalendar','value'=>'','placeholder'=>''); $config = array_merge($default,$config); if(!$config['callback']){ $config['callback'] = ''; } return W('date',$config); } function wSearch($config){ $default = array('max'=>0,'model_name'=>'student','app_name'=>'edu','search_method'=>'getSearchList','editable'=>1,'id'=>'', 'detail_method'=>'getSearchDetail','placeholder'=>'','inputname'=>'','autostart'=>0,'default_ids'=>'', 'width'=>200,'selectFirst'=>1,'length'=>14); $config = array_merge($default,$config); if(empty($config['list_width'])){ $config['list_width'] = $config['width']; } if(empty($config['id'])){ $config['id'] = $config['inputname']; } if(isset($config['default_ids']) && !empty($config['default_ids'])){ $config['default_ids'] = is_array($config['default_ids']) ? $config['default_ids'] : explode(',',$config['default_ids']); $do = D($config['model_name'],$config['app_name']); $config['default_ids'] = array_unique($config['default_ids']); foreach($config['default_ids'] as $id){ if(!empty($id)){ $info = $do->$config['detail_method']($id); !empty($info) && $config['search_list'][] = $info; } } $config['default_ids'] = implode(',',$config['default_ids']); }else{ $config['default_ids'] = ''; } if(!empty($config['tpl'])){ return W($config['tpl'],$config); }else{ return W('search',$config); } } function W($name,$config){ return fetch(THEME_PATH.'/widget/'.$name.'.html',$config); } function showStudentAvatar($student_id,$attach_id = ''){ if(empty($attach_id)){ $map['student_id'] = $student_id; $student_info = model('Student')->where($map)->find(); $attach_id = $student_info['attach_id']; } if(empty($attach_id)){ return THEME_PUBLIC_URL.'/image/avatar.jpg'; } return U('edu/Public/showImage',array('attach_id'=>$attach_id,'type'=> 'cut_140_202')); } function showImageSrc($attach_id,$type='cut_120_120'){ if(empty($attach_id)){ return THEME_PUBLIC_URL.'/image/avatar_user.jpg'; } return U('edu/Public/showImage',array('attach_id'=>$attach_id,'type'=> $type)); } function P($action){ return true; } function checkLoginUname($uname,$login){ $map['login'] = $login; $info = D('login_uname')->where($map)->find(); if(empty($info)){ return '1'; } return trim($info['uname']) == trim($uname)?'1':$info['uname']; } qmdefine('CLIENT_MULTI_RESULTS', 131072); class Db extends Qiming { static private $_instance = null; protected $autoFree = false; public $debug = false; protected $pconnect = false; protected $queryStr = ''; protected $lastInsID = null; protected $numRows = 0; protected $numCols = 0; protected $transTimes = 0; protected $error = ''; protected $linkID = null; protected $queryID = null; protected $connected = false; protected $config = ''; protected $beginTime; protected $comparison = array('eq'=>'=','neq'=>'!=','gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<=','notlike'=>'NOT LIKE','like'=>'LIKE'); protected $selectSql = 'SELECT%DISTINCT% %FIELDS% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%'; public function __construct($config=''){ if ( !extension_loaded('mysql') ) { throw_exception(L('_NOT_SUPPERT_').':mysql'); } $this->debug = isset($_GET['debug']) ? true : false; $this->config = $this->parseConfig($config); } public function connect() { if(!$this->connected) { $config = $this->config; $host = $config['hostname'].($config['hostport']?":{$config['hostport']}":''); if($this->pconnect) { $this->linkID = mysql_pconnect( $host, $config['username'], $config['password'],CLIENT_MULTI_RESULTS); }else{ $this->linkID = mysql_connect( $host, $config['username'], $config['password'],true,CLIENT_MULTI_RESULTS); } if ( !$this->linkID || (!empty($config['database']) && !mysql_select_db($config['database'], $this->linkID)) ) { $error = mysql_error(); if($error){ throw_exception($error); }else{ return false; } } $dbVersion = mysql_get_server_info($this->linkID); if ($dbVersion >= "4.1") { mysql_query("SET NAMES '".C('DB_CHARSET')."'", $this->linkID); } if($dbVersion >'5.0.1'){ mysql_query("SET sql_mode=''",$this->linkID); } $this->connected = true; unset($this->config); } } public function free() { mysql_free_result($this->queryID); $this->queryID = 0; } public function query($str='',$method='',$p='',$p2='') { $this->connect(); if ( !$this->linkID ) return false; if ( $str != '' ) $this->queryStr = $str; if ( $this->queryID ) { $this->free(); } $this->Q(1); $this->queryID = mysql_query($this->queryStr, $this->linkID); $this->debug(); if ( !$this->queryID ) { if ( $this->debug ) throw_exception($this->error()); else return false; } else { $this->numRows = mysql_num_rows($this->queryID); if(!empty($method)){ return $this->$method($p,$p2); } return $this->getAll(); } } public function execute($str='') { $this->connect(); if ( !$this->linkID ) return false; if ( $str != '' ) $this->queryStr = $str; if ( $this->queryID ) { $this->free(); } $this->W(1); $result = mysql_query($this->queryStr, $this->linkID) ; $this->debug(); if ( false === $result) { if ( $this->debug ) throw_exception($this->error()); else return false; } else { $this->numRows = mysql_affected_rows($this->linkID); $this->lastInsID = mysql_insert_id($this->linkID); return $this->numRows; } } public function startTrans() { $this->connect(true); if ( !$this->linkID ) return false; if ($this->transTimes == 0) { mysql_query('START TRANSACTION', $this->linkID); } $this->transTimes++; return ; } public function commit() { if ($this->transTimes > 0) { $result = mysql_query('COMMIT', $this->linkID); $this->transTimes = 0; if(!$result){ throw_exception($this->error()); return false; } } return true; } public function rollback() { if ($this->transTimes > 0) { $result = mysql_query('ROLLBACK', $this->linkID); $this->transTimes = 0; if(!$result){ throw_exception($this->error()); return false; } } return true; } public function getAll() { if ( !$this->queryID ) { throw_exception($this->error()); return false; } $result = array(); if($this->numRows >0) { while($row = mysql_fetch_assoc($this->queryID)){ $result[] = $row; } mysql_data_seek($this->queryID,0); } return $result; } public function getFieldAsArray($field='*',$nouse='') { if ( !$this->queryID ) { throw_exception($this->error()); return false; } $result = array(); if($this->numRows >0) { while($row = mysql_fetch_assoc($this->queryID)){ $result[] = $field =='*' ? $row : @$row[$field]; } mysql_data_seek($this->queryID,0); } return $result; } public function getHashList($hashKey='',$hashValue='*'){ if ( !$this->queryID ) { throw_exception($this->error()); return false; } $result = array(); if($this->numRows >0) { while($row = mysql_fetch_assoc($this->queryID)){ if(empty($hashKey)){ $reuslt[] = $hashValue =='*' ? $row : @$row[$hashValue]; }else{ $result[$row[$hashKey]] = $hashValue =='*' ? $row : @$row[$hashValue]; } } mysql_data_seek($this->queryID,0); } return $result; } public function getFields($tableName) { $result = $this->query('SHOW COLUMNS FROM '.$tableName); $info = array(); foreach ($result as $key => $val) { $info[$val['Field']] = array( 'name' => $val['Field'], 'type' => $val['Type'], 'notnull' => (bool) ($val['Null'] === ''), 'default' => $val['Default'], 'primary' => (strtolower($val['Key']) == 'pri'), 'autoinc' => (strtolower($val['Extra']) == 'auto_increment'), ); } return $info; } public function getTables($dbName='') { if(!empty($dbName)) { $sql = 'SHOW TABLES FROM '.$dbName; }else{ $sql = 'SHOW TABLES '; } $result = $this->query($sql); $info = array(); foreach ($result as $key => $val) { $info[$key] = current($val); } return $info; } public function close() { if (!empty($this->queryID)) mysql_free_result($this->queryID); if ($this->linkID && !mysql_close($this->linkID)){ throw_exception($this->error()); } $this->linkID = 0; } public function error() { $this->error = mysql_error($this->linkID); if($this->queryStr!=''){ $this->error .= "\n [ SQL语句 ] : ".$this->queryStr; } return $this->error; } public function escape_string($str) { if($this->linkID) { return mysql_real_escape_string($str,$this->linkID); }else{ return mysql_escape_string($str); } } public function __destruct() { $this->close(); } public static function getInstance($db_config='') { if ( self::$_instance==null ){ self::$_instance = new Db($db_config); } return self::$_instance; } private function parseConfig($db_config='') { if ( !empty($db_config) && is_string($db_config)) { $db_config = $this->parseDSN($db_config); }else if(empty($db_config)){ $db_config = array ( 'dbms' => C('DB_TYPE'), 'username' => C('DB_USER'), 'password' => C('DB_PWD'), 'hostname' => C('DB_HOST'), 'hostport' => C('DB_PORT'), 'database' => C('DB_NAME'), 'dsn' => C('DB_DSN'), 'params' => C('DB_PARAMS'), ); } return $db_config; } public function parseDSN($dsnStr) { if( empty($dsnStr) ){return false;} $info = parse_url($dsnStr); if($info['scheme']){ $dsn = array( 'dbms' => $info['scheme'], 'username' => isset($info['user']) ? $info['user'] : '', 'password' => isset($info['pass']) ? $info['pass'] : '', 'hostname' => isset($info['host']) ? $info['host'] : '', 'hostport' => isset($info['port']) ? $info['port'] : '', 'database' => isset($info['path']) ? substr($info['path'],1) : '' ); }else { preg_match('/^(.*?)\:\/\/(.*?)\:(.*?)\@(.*?)\:([0-9]{1, 6})\/(.*?)$/',trim($dsnStr),$matches); $dsn = array ( 'dbms' => $matches[1], 'username' => $matches[2], 'password' => $matches[3], 'hostname' => $matches[4], 'hostport' => $matches[5], 'database' => $matches[6] ); } return $dsn; } protected function debug() { if ( $this->debug ) { $runtime = number_format(microtime(TRUE) - $this->beginTime, 6); Log::record(" RunTime:".$runtime."s SQL = ".$this->queryStr,Log::SQL,true); } } protected function parseLock($lock=false) { if(!$lock) return ''; if('ORACLE' == $this->dbType) { return ' FOR UPDATE NOWAIT '; } return ' FOR UPDATE '; } protected function parseSet($data) { foreach ($data as $key=>$val){ $value = $this->parseValue($val); if(is_scalar($value)) $set[] = $this->addSpecialChar($key).'='.$value; } return ' SET '.implode(',',$set); } protected function parseValue($value) { if(is_string($value)) { $value = '\''.$this->escape_string($value).'\''; }elseif(isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp'){ $value = $this->escape_string($value[1]); }elseif(is_null($value)){ $value = 'null'; } return $value; } protected function parseField($fields) { if(is_array($fields)) { $array = array(); foreach ($fields as $key=>$field){ if(!is_numeric($key)) $array[] = $this->addSpecialChar($key).' AS '.$this->addSpecialChar($field); else $array[] = $this->addSpecialChar($field); } $fieldsStr = implode(',', $array); }elseif(is_string($fields) && !empty($fields)) { $fieldsStr = $this->addSpecialChar($fields); }else{ $fieldsStr = '*'; } return $fieldsStr; } protected function parseTable($tables) { if(is_string($tables)) $tables = explode(',',$tables); array_walk($tables, array(&$this, 'addSpecialChar')); return implode(',',$tables); } protected function parseWhere($where) { $whereStr = ''; if(is_string($where)) { $whereStr = $where; }else{ if(array_key_exists('_logic',$where)) { $operate = ' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{ $operate = ' AND '; } foreach ($where as $key=>$val){ $whereStr .= "( "; if(0===strpos($key,'_')) { $whereStr .= $this->parseThinkWhere($key,$val); }else{ $key = $this->addSpecialChar($key); if(is_array($val)) { if(is_string($val[0])) { if(preg_match('/^(EQ|NEQ|GT|EGT|LT|ELT|NOTLIKE|LIKE)$/i',$val[0])) { $whereStr .= $key.' '.$this->comparison[strtolower($val[0])].' '.$this->parseValue($val[1]); }elseif('exp'==strtolower($val[0])){ $whereStr .= ' ('.$key.' '.$val[1].') '; }elseif(preg_match('/IN/i',$val[0])){ $zone = is_array($val[1])? implode(',',$this->parseValue($val[1])):$val[1]; $whereStr .= $key.' '.strtoupper($val[0]).' ('.$zone.')'; }elseif(preg_match('/BETWEEN/i',$val[0])){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $whereStr .= ' ('.$key.' BETWEEN '.$data[0].' AND '.$data[1].' )'; }else{ throw_exception(L('_EXPRESS_ERROR_').':'.$val[0]); } }else { $count = count($val); if(in_array(strtoupper(trim($val[$count-1])),array('AND','OR','XOR'))) { $rule = strtoupper(trim($val[$count-1])); $count = $count -1; }else{ $rule = 'AND'; } for($i=0;$i<$count;$i++) { $data = is_array($val[$i])?$val[$i][1]:$val[$i]; if('exp'==strtolower($val[$i][0])) { $whereStr .= '('.$key.' '.$data.') '.$rule.' '; }else{ $op = is_array($val[$i])?$this->comparison[strtolower($val[$i][0])]:'='; $whereStr .= '('.$key.' '.$op.' '.$this->parseValue($data).') '.$rule.' '; } } $whereStr = substr($whereStr,0,-4); } }else { if(C('LIKE_MATCH_FIELDS') && preg_match('/('.C('LIKE_MATCH_FIELDS').')/i',$key)) { $val = '%'.$val.'%'; $whereStr .= $key." LIKE ".$this->parseValue($val); }else { $whereStr .= $key." = ".$this->parseValue($val); } } } $whereStr .= ' )'.$operate; } $whereStr = substr($whereStr,0,-strlen($operate)); } return empty($whereStr)?'':' WHERE '.$whereStr; } protected function parseThinkWhere($key,$val) { $whereStr = ''; switch($key) { case '_string': $whereStr = $val; break; case '_complex': $whereStr = substr($this->parseWhere($val),6); break; case '_query': parse_str($val,$where); if(array_key_exists('_logic',$where)) { $op = ' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{ $op = ' AND '; } $array = array(); foreach ($where as $field=>$data) $array[] = $this->addSpecialChar($field).' = '.$this->parseValue($data); $whereStr = implode($op,$array); break; } return $whereStr; } protected function parseLimit($limit) { return !empty($limit)? ' LIMIT '.$limit.' ':''; } protected function parseJoin($join) { $joinStr = ''; if(!empty($join)) { if(is_array($join)) { foreach ($join as $key=>$_join){ if(false !== stripos($_join,'JOIN')) $joinStr .= ' '.$_join; else $joinStr .= ' LEFT JOIN ' .$_join; } }else{ $joinStr .= ' LEFT JOIN ' .$join; } } return $joinStr; } protected function parseOrder($order) { return !empty($order)? ' ORDER BY '.$order:''; } protected function parseGroup($group) { return !empty($group)? ' GROUP BY '.$group:''; } protected function parseHaving($having) { return !empty($having)? ' HAVING '.$having:''; } protected function parseDistinct($distinct) { return !empty($distinct)? ' DISTINCT ' :''; } public function insert($data,$options=array()) { foreach ($data as $key=>$val){ $value = $this->parseValue($val); if(is_scalar($value)) { $values[] = $value; $fields[] = $this->addSpecialChar($key); } } $sql = 'INSERT INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')'; $sql .= $this->parseLock(isset($options['lock'])?$options['lock']:false); return $this->execute($sql); } public function update($data,$options) { $sql = 'UPDATE ' .$this->parseTable($options['table']) .$this->parseSet($data) .$this->parseWhere(isset($options['where'])?$options['where']:'') .$this->parseOrder(isset($options['order'])?$options['order']:'') .$this->parseLimit(isset($options['limit'])?$options['limit']:'') .$this->parseLock(isset($options['lock'])?$options['lock']:false); return $this->execute($sql); } public function delete($options=array()) { $sql = 'DELETE FROM ' .$this->parseTable($options['table']) .$this->parseWhere(isset($options['where'])?$options['where']:'') .$this->parseOrder(isset($options['order'])?$options['order']:'') .$this->parseLimit(isset($options['limit'])?$options['limit']:'') .$this->parseLock(isset($options['lock'])?$options['lock']:false); return $this->execute($sql); } public function select($options=array(),$method='',$p='',$p2='') { if(isset($options['page'])) { list($page,$listRows) = explode(',',$options['page']); $listRows = $listRows?$listRows:($options['limit']?$options['limit']:20); $offset = $listRows*((int)$page-1); $options['limit'] = $offset.','.$listRows; } $sql = str_replace( array('%TABLE%','%DISTINCT%','%FIELDS%','%JOIN%','%WHERE%','%GROUP%','%HAVING%','%ORDER%','%LIMIT%'), array( $this->parseTable($options['table']), $this->parseDistinct(isset($options['distinct'])?$options['distinct']:false), $this->parseField(isset($options['field'])?$options['field']:'*'), $this->parseJoin(isset($options['join'])?$options['join']:''), $this->parseWhere(isset($options['where'])?$options['where']:''), $this->parseGroup(isset($options['group'])?$options['group']:''), $this->parseHaving(isset($options['having'])?$options['having']:''), $this->parseOrder(isset($options['order'])?$options['order']:''), $this->parseLimit(isset($options['limit'])?$options['limit']:'') ),$this->selectSql); $sql .= $this->parseLock(isset($options['lock'])?$options['lock']:false); return $this->query($sql,$method,$p,$p2); } protected function addSpecialChar(&$value) { $value = trim($value); if( false !== strpos($value,' ') || false !== strpos($value,',') || false !== strpos($value,'*') || false !== strpos($value,'(') || false !== strpos($value,'.') || false !== strpos($value,'`')) { }else{ $value = '`'.$value.'`'; } return $value; } public function Q($times='') { static $_times = 0; if(empty($times)) { return $_times; }else{ $_times++; $this->beginTime = microtime(TRUE); } } public function W($times='') { static $_times = 0; if(empty($times)) { return $_times; }else{ $_times++; $this->beginTime = microtime(TRUE); } } public function getLastSql() { return $this->queryStr; } } abstract class Action { private $name = ''; protected $tVar = array(); protected $trace = array(); protected $templateFile = ''; protected $user = array(); protected $student = array(); protected $isAdmin = 0; protected $login = ''; public function __construct() { $this->initUser(); if(method_exists($this,'_initialize')) $this->_initialize(); } private function initUser() { if( model('Passport')->needLogin() ) { U('index/Index/login','',true);exit(); } $GLOBALS['qm']['login'] = $this->login = isset($_SESSION['login']) ? $_SESSION['login'] : ''; if( !empty( $this->login ) ){ $this->user = model('User')->getDetailByLogin($this->login); } $this->assign('user', $this->user); $this->assign('login',$this->login); } public function __call($method,$parms) { if( 0 === strcasecmp($method,ACTION_NAME)) { $_action = C('_actions_'); if($_action) { if(isset($_action[MODULE_NAME.':'.ACTION_NAME])) { $action = $_action[MODULE_NAME.':'.ACTION_NAME]; }elseif(isset($_action[ACTION_NAME])){ $action = $_action[ACTION_NAME]; } if(!empty($action)) { call_user_func($action); return ; } } if(method_exists($this,'_empty')) { $this->_empty($method,$parms); }else { $this->display(); } }elseif(in_array(strtolower($method),array('ispost','isget','ishead','isdelete','isput'))){ return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } } public function setTitle($title = '') { $this->assign('_title',$title); } public function assign($name,$value='') { if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) $this->tVar[$key] = $val; }else { $this->tVar[$name] = $value; } } public function __set($name,$value) { $this->assign($name,$value); } protected function get($name) { if(isset($this->tVar[$name])) return $this->tVar[$name]; else return false; } protected function trace($name,$value='') { if(is_array($name)) $this->trace = array_merge($this->trace,$name); else $this->trace[$name] = $value; } protected function display($templateFile='',$charset='utf-8',$contentType='text/html') { echo $this->fetch($templateFile,$charset,$contentType,true); } protected function fetch($templateFile='',$charset='utf-8',$contentType='text/html',$display=false) { return fetch($templateFile,$this->tVar,$charset,$contentType,$display); } protected function error($message,$ajax=false) { $this->_dispatch_jump($message,0,$ajax); } protected function page404($message){ $this->assign('message',$message); $this->display(THEME_PATH.'/page404.html'); } protected function success($message,$ajax=false) { $this->_dispatch_jump($message,1,$ajax); } protected function ajaxReturn($data,$info='',$status=1,$type='JSON') { if(C('LOG_RECORD')) Log::save(); $result = array(); $result['status'] = $status; $result['info'] = $info; $result['data'] = $data; if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); if(strtoupper($type)=='JSON') { header("Content-Type:text/html; charset=utf-8"); exit(json_encode($result)); }elseif(strtoupper($type)=='XML'){ header("Content-Type:text/xml; charset=utf-8"); exit(xml_encode($result)); }elseif(strtoupper($type)=='EVAL'){ header("Content-Type:text/html; charset=utf-8"); exit($data); }else{ } } protected function redirect($url,$params=array(),$delay=0,$msg='') { if(C('LOG_RECORD')) Log::save(); $url = U($url,$params); redirect($url,$delay,$msg); } private function _dispatch_jump($message,$status=1,$ajax=false) { if($ajax || $this->isAjax()) $this->ajaxReturn('',$message,$status); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); empty($message) && ($message = $status==1?L('PUBLIC_ADMIN_OPRETING_SUCCESS'):L('PUBLIC_ADMIN_OPRETING_ERROR')); $this->assign('message',$message); C('HTML_CACHE_ON',false); if($status) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"2"); if(!$this->get('jumpUrl')) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(THEME_PATH.'/success.html'); }else{ if(!$this->get('waitSecond')) $this->assign('waitSecond',"5"); if(!$this->get('jumpUrl')) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(THEME_PATH.'/success.html'); } if(C('LOG_RECORD')) Log::save(); exit ; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } }; class Cache extends Qiming { protected $connected ; protected $handler ; protected $prefix='~@'; protected $options = array(); protected $type ; protected $expire ; public static $log = array(); public $debug = true; public function connect($type='',$options=array()) { if(empty($type)) $type = C('DATA_CACHE_TYPE'); $cachePath = ADDON_PATH.'/liberary/cache/'; $cacheClass = 'Cache'.ucwords(strtolower(trim($type))); $this->type = strtoupper(substr($cacheClass,5)); qmload($cachePath.$cacheClass.'.class.php'); if(class_exists($cacheClass)) $cache = new $cacheClass($options); else throw_exception(L('_CACHE_TYPE_INVALID_').':'.$type); return $cache; } public function __get($name) { return $this->get($name); } public function __set($name,$value) { return $this->set($name,$value); } public function __unset($name) { $this->rm($name); } public function setOptions($name,$value) { $this->options[$name] = $value; } public function getOptions($name) { return $this->options[$name]; } static function getInstance() { $param = func_get_args(); return get_instance_of(__CLASS__,'connect',$param); } protected function queue($key) { $value = S('qiming_queue'); if(!$value) { $value = array(); } array_push($value,$key); if(count($value) > $this->options['length']) { $key = array_shift($value); $this->rm($key); } return S('qiming_queue',$value); } public function N($type,$nums=1,$name){ $f = $type == 'cache_read' ? 'Q' : 'W'; $this-> $f(1,$name); } public function Q($times='',$name) { static $_times = 0; if($this->debug){ self::$log['Q'] = $_times +1; self::$log['Qkey'][] = $name; } if(empty($times)) return $_times; else $_times++; } public function W($times='',$name) { static $_times = 0; if($this->debug){ self::$log['W'] = $_times +1; self::$log['Wkey'][] = $name; } if(empty($times)) return $_times; else $_times++; } } class Session { public static $instance = null; public static $maxlifetime = 3600; public static $handler; public static function getInstance(){ if(!empty(self::$instance)){ return self::$instance; } self::$instance = new self; self::getHandler(); session_set_save_handler( array(self::$instance, 'open'), array(self::$instance, 'close'), array(self::$instance, 'read'), array(self::$instance, 'write'), array(self::$instance, 'destroy'), array(self::$instance, 'gc') ); register_shutdown_function('session_write_close'); self::$maxlifetime = C('SESSION_GC_MAXLIFETIME'); if(!self::$maxlifetime){ self::$maxlifetime = intval(ini_get("session.gc_maxlifetime")); } session_start(); session_name(C('SESSION_NAME')); return self::$instance; } static function getHandler(){ $path = ADDON_PATH.'/liberary/session/'; $sessionClass = 'Session'.ucfirst(C('SESSION_HANDER')); qmload($path.$sessionClass.'.class.php'); if(class_exists($sessionClass)){ self::$handler = new $sessionClass(); }else{ throw_exception(L('Session Hander not Found').':'.$sessionClass); } } public static function start(){ self::getInstance(); } public function open(){ return true; } public function close(){ return true; } public function read($id){ $data = self::$handler->get($id); !$data && $data = ''; return $data; } public function write($id,$data){ return self::$handler->set($id,$data,self::$maxlifetime); } public static function destroy($id){ session_write_close(); return self::$handler->rm($id); } public function gc(){ return true; } public static function get($name){ return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } public static function set($name,$value){ if(null === $value){ unset($_SESSION[$name]); }else{ $_SESSION[$name] = $value; } } public static function clear(){ $_SESSION = array(); } public static function setExpire($gcMaxLifetime = null){ $return = ini_get('session.gc_maxlifetime'); if (isset($gcMaxLifetime) && is_int($gcMaxLifetime) && $gcMaxLifetime >= 1) { ini_set('session.gc_maxlifetime', $gcMaxLifetime); self::$maxlifetime = $gcMaxLifetime; }else{ self::$maxlifetime = $return; } return self::$maxlifetime; } } include('Log.class.php'); class App { static public function init() { if(@$_GET['debug']){ $GLOBALS['debug']['mem_run_start'] = memory_get_usage(); $GLOBALS['debug']['time_run_start'] = microtime(TRUE); } set_error_handler(array('App','appError')); set_exception_handler(array('App','appException')); header("Content-Type:text/html;charset=utf-8"); date_default_timezone_set(C('DEFAULT_TIMEZONE')); if(!defined('RUNTIME_MODEL')){ App::build(); } } static public function run() { App::init(); App::execApp(); App::printDebug(); static_cache(null,null,true); return ; } static public function execApp() { $className = MODULE_NAME.'Action'; qmload(APP_ACTION_PATH.'/'.$className.'.class.php'); if(!class_exists($className)) { $className = 'EmptyAction'; qmload(APP_ACTION_PATH.'/EmptyAction.class.php'); if(!class_exists($className)){ throw_exception( L('_MODULE_NOT_EXIST_').MODULE_NAME ); } } $module = new $className(); if(!$module) { throw_exception( L('_MODULE_NOT_EXIST_').MODULE_NAME ); } $action = ACTION_NAME; call_user_func(array(&$module,$action)); return ; } static public function printDebug(){ if(isset($_GET['debug'])){ $GLOBALS['debug']['mem_run_end'] = memory_get_usage(); $GLOBALS['debug']['time_run_end'] = microtime(TRUE); echo '<pre>'; print_r(Log::$log); print_r(Cache::$log); echo '</pre><hr>'; echo ' Memories: '."<br/>"; echo 'ToTal: ',number_format(($GLOBALS['debug']['mem_run_end'] - $GLOBALS['debug']['mem_include_start']) /1024),'k',"<br/>"; echo 'Include:',number_format(($GLOBALS['debug']['mem_run_start'] - $GLOBALS['debug']['mem_include_start']) /1024),'k',"<br/>"; echo 'Run:',number_format(($GLOBALS['debug']['mem_run_end'] - $GLOBALS['debug']['mem_run_start'])/1024),'k<br/><hr/>'; echo 'Time:<br/>'; echo 'ToTal: ',$GLOBALS['debug']['time_run_end'] - $GLOBALS['debug']['time_include_start'],"s<br/>"; echo 'Include:',$GLOBALS['debug']['time_run_start'] - $GLOBALS['debug']['time_include_start'],'s',"<br/>"; echo 'Run:',$GLOBALS['debug']['time_run_end'] - $GLOBALS['debug']['time_run_start'],'s<br/><br/>'; $files = get_included_files(); dump($files); } } static public function execWidget() { if(file_exists(ADDON_PATH.'/widget/'.MODULE_NAME.'Widget/'.MODULE_NAME.'Widget.class.php')){ qmload(ADDON_PATH.'/widget/'.MODULE_NAME.'Widget/'.MODULE_NAME.'Widget.class.php'); }else{ if(file_exists(APP_PATH.'/Widget/'.MODULE_NAME.'Widget/'.MODULE_NAME.'Widget.class.php')){ qmload(APP_PATH.'/Widget/'.MODULE_NAME.'Widget/'.MODULE_NAME.'Widget.class.php'); } } $className = MODULE_NAME.'Widget'; $module = new $className(); if(!$module) { throw_exception( L('_MODULE_NOT_EXIST_').MODULE_NAME ); } $action = ACTION_NAME; if($rs = call_user_func(array(&$module,$action))){ echo $rs; } return ; } static public function appException($e) { if(C('LOG_RECORD')) Log::write($e->__toString(),Log::ERR); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "[$errno] $errstr ".basename($errfile)." line :".$errline; if(C('LOG_RECORD')) Log::write($errorStr,Log::ERR); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".basename($errfile)." line :".$errline; if(C('LOG_RECORD')) Log::write($errorStr,Log::NOTICE); break; } } static private function build() { $coreFileList = include(CONF_PATH.'/coreFileList.php'); $runtime = $content = ''; foreach($coreFileList as $v){ $runtime .= compile($v,true); } file_put_contents(CONF_PATH.'/'.CORE_MODE.'Runtime.php',strip_whitespace('<?php '.$runtime)); return true; } }; abstract class Modelite { protected $error = ''; public function __construct($name='') { $this->_initialize(); } protected function _initialize() {} public function getError() { return $this->error; } } class Page { public $firstRow ; public $listRows ; public $parameter ; public $totalPages ; public $totalRows ; public $nowPage ; public $coolPages ; public $rollPage ; public $config; public function __construct($totalRows,$listRows='',$parameter='') { $this->config = array('header'=>L('PUBLIC_T_RECORD'),'prev'=>'上一页','next'=>'下一页','first'=>'第一页','last'=>'最后页'); $this->totalRows = $totalRows; $this->parameter = $parameter; $this->rollPage = 5; $this->listRows = !empty($listRows)?$listRows:20; $this->totalPages = ceil($this->totalRows/$this->listRows); $this->coolPages = ceil($this->totalPages/$this->rollPage); if( (!empty($this->totalPages) && $_REQUEST[C('VAR_PAGE')]>$this->totalPages) || $_REQUEST[C('VAR_PAGE')]=='last' ) { $this->nowPage = $this->totalPages; $_REQUEST[C('VAR_PAGE')] = $this->totalPages; }else{ $this->nowPage = intval($_REQUEST[C('VAR_PAGE')])>0?intval($_REQUEST[C('VAR_PAGE')]):1; } $this->firstRow = $this->listRows*($this->nowPage-1); } public function setConfig($name,$value) { if(isset($this->config[$name])) { $this->config[$name] = $value; } } public function show($isArray=false){ if(APP_NAME == 'wap' || APP_NAME == 'WAP'){ return $this->wapShow($isArray); } if(0 == $this->totalRows) return; $url = eregi_replace("(#.+$|p=[0-9]+)",'',$_SERVER['REQUEST_URI']); $url = $url.(strpos($url,'?')?'':"?"); $url = eregi_replace("(&+)",'&',$url); $url = trim($url,'&'); $upRow = $this->nowPage-1; $downRow = $this->nowPage+1; if ($upRow>0){ $upPage="<a href='".$url."&".C('VAR_PAGE')."=$upRow' class='pre'>".$this->config['prev']."</a>"; }else{ $upPage=""; } if ($downRow <= $this->totalPages){ $downPage="<a href='".$url."&".C('VAR_PAGE')."=$downRow' class='next'>".$this->config['next']."</a>"; }else{ $downPage=""; } $linkPage = ""; $halfRoll = ceil($this->rollPage/2); if( $this->totalPages <= $this->rollPage ){ $leftPages = $this->nowPage-1; $rightPages = $this->totalPages-$leftPages-1; }elseif( ($this->nowPage < $halfRoll) && ($this->totalPages > $this->rollPage) ){ $leftPages = $this->nowPage-1; $rightPages = $this->rollPage-$leftPages-1; }elseif( ($this->totalPages-$this->nowPage) < $halfRoll ){ $rightPages = $this->totalPages-$this->nowPage; $leftPages = $this->rollPage-$rightPages-1; }else{ $rightPages = $this->rollPage-$halfRoll; $leftPages = $this->rollPage-$rightPages-1; } if($leftPages>0){ for($i=$this->nowPage-$leftPages;$i<$this->nowPage;$i++){ $linkPage .= "<a href='".$url."&".C('VAR_PAGE')."=$i'>".$i."</a>"; } } $linkPage .= " <a class='current'>".$this->nowPage."</a>"; if($rightPages>0){ for($i=$this->nowPage+1;$i<=$this->nowPage+$rightPages;$i++){ $linkPage .= "<a href='".$url."&".C('VAR_PAGE')."=$i'>".$i."</a>"; } } if( $this->nowPage <= $halfRoll || $this->totalPages <= $this->rollPage ){ $theFirst = ""; $prePage = ""; }else{ $preRow = $this->nowPage-$this->rollPage; $prePage = "<a href='".$url."&".C('VAR_PAGE')."=$preRow' >".L('PUBLIC_UP_PAGE',array('page'=>$this->rollPage))."</a>"; $theFirst = "<a href='".$url."&".C('VAR_PAGE')."=1' >1..</a>"; } if( ($this->totalPages-$this->nowPage) < $halfRoll || $this->totalPages <= $this->rollPage ){ $nextPage = ""; $theEnd=""; }else{ $nextRow = $this->nowPage+$this->rollPage; $theEndRow = $this->totalPages; $nextPage = "<a href='".$url."&".C('VAR_PAGE')."=$nextRow' >".L('PUBLIC_DOWN_PAGE',array('page'=>$this->rollPage))."</a>"; $theEnd = "<a href='".$url."&".C('VAR_PAGE')."=$theEndRow' >..{$theEndRow}</a>"; } if( ( $this->totalPages+1 - $halfRoll ) == $this->nowPage || $this->totalPages == $this->nowPage ){ $theEnd = ""; } if( $this->totalPages > 1 ) $pageStr = $upPage.$theFirst.$linkPage.$theEnd.$downPage; if($isArray) { $pageArray['totalRows'] = $this->totalRows; $pageArray['upPage'] = $url.'&'.C('VAR_PAGE')."=$upRow"; $pageArray['downPage'] = $url.'&'.C('VAR_PAGE')."=$downRow"; $pageArray['totalPages']= $this->totalPages; $pageArray['firstPage'] = $url.'&'.C('VAR_PAGE')."=1"; $pageArray['endPage'] = $url.'&'.C('VAR_PAGE')."=$theEndRow"; $pageArray['nextPages'] = $url.'&'.C('VAR_PAGE')."=$nextRow"; $pageArray['prePages'] = $url.'&'.C('VAR_PAGE')."=$preRow"; $pageArray['linkPages'] = $linkPage; $pageArray['nowPage'] = $this->nowPage; return $pageArray; } return $pageStr; } public function wapShow($isArray=false){ if(0 == $this->totalRows) return; $url = eregi_replace("(#.+$|p=[0-9]+)",'',$_SERVER['REQUEST_URI']); $url = $url.(strpos($url,'?')?'':"?"); $url = eregi_replace("(&+)",'&',$url); $url = trim($url,'&'); $upRow = $this->nowPage-1; $downRow = $this->nowPage+1; if ($upRow>0){ $upPage="<a href='".$url."&".C('VAR_PAGE')."=$upRow' class='pre'>".$this->config['prev']."</a>"; }else{ $upPage=""; } if ($downRow <= $this->totalPages){ $downPage="<a href='".$url."&".C('VAR_PAGE')."=$downRow' class='next'>".$this->config['next']."</a>"; }else{ $downPage=""; } $linkPage = ""; $halfRoll = ceil($this->rollPage/2); if( $this->totalPages <= $this->rollPage ){ $leftPages = $this->nowPage-1; $rightPages = $this->totalPages-$leftPages-1; }elseif( ($this->nowPage < $halfRoll) && ($this->totalPages > $this->rollPage) ){ $leftPages = $this->nowPage-1; $rightPages = $this->rollPage-$leftPages-1; }elseif( ($this->totalPages-$this->nowPage) < $halfRoll ){ $rightPages = $this->totalPages-$this->nowPage; $leftPages = $this->rollPage-$rightPages-1; }else{ $rightPages = $this->rollPage-$halfRoll; $leftPages = $this->rollPage-$rightPages-1; } if($leftPages>0){ for($i=$this->nowPage-$leftPages;$i<$this->nowPage;$i++){ $linkPage .= "<a href='".$url."&".C('VAR_PAGE')."=$i'>".$i."</a>"; } } $linkPage .= " <a class='current'>".$this->nowPage."</a>"; if($rightPages>0){ for($i=$this->nowPage+1;$i<=$this->nowPage+$rightPages;$i++){ $linkPage .= "<a href='".$url."&".C('VAR_PAGE')."=$i'>".$i."</a>"; } } if( $this->nowPage <= $halfRoll || $this->totalPages <= $this->rollPage ){ $theFirst = ""; $prePage = ""; }else{ $preRow = $this->nowPage-$this->rollPage; $prePage = "<a href='".$url."&".C('VAR_PAGE')."=$preRow' class='pre'>".L('PUBLIC_UP_PAGE',array('page'=>$this->rollPage))."</a>"; $theFirst = "<a href='".$url."&".C('VAR_PAGE')."=1' >1..</a>"; } if( ($this->totalPages-$this->nowPage) < $halfRoll || $this->totalPages <= $this->rollPage ){ $nextPage = ""; $theEnd=""; }else{ $nextRow = $this->nowPage+$this->rollPage; $theEndRow = $this->totalPages; $nextPage = "<a href='".$url."&".C('VAR_PAGE')."=$nextRow' class='next'>".L('PUBLIC_DOWN_PAGE',array('page'=>$this->rollPage))."</a>"; $theEnd = "<a href='".$url."&".C('VAR_PAGE')."=$theEndRow' >..{$theEndRow}</a>"; } if( ( $this->totalPages+1 - $halfRoll ) == $this->nowPage || $this->totalPages == $this->nowPage ){ $theEnd = ""; } if( $this->totalPages > 1 ){ $nowUrl = SITE_URL.'/index.php?'.$_SERVER['QUERY_STRING']; $nowUrl = preg_replace("/&p=[0-9]*/",'',$nowUrl); $pageStr = '<form method="post" action="'.$nowUrl.'"><span>'.$upPage.'&nbsp;'.$downPage.'&nbsp;'.$this->nowPage.'/'.$this->totalPages.L('PUBLIC_PAGE').'</span>'; $pageStr .= '<input type="text" style="margin-left:8px;width:40px"  name="p" id="p" value="'.$this->nowPage.'">'; $pageStr .= '<input type="submit" value="'.L("PUBLIC_JUMP_TO").'"/>
				</form>'; } if($isArray) { $pageArray['totalRows'] = $this->totalRows; $pageArray['upPage'] = $url.'&'.C('VAR_PAGE')."=$upRow"; $pageArray['downPage'] = $url.'&'.C('VAR_PAGE')."=$downRow"; $pageArray['totalPages']= $this->totalPages; $pageArray['firstPage'] = $url.'&'.C('VAR_PAGE')."=1"; $pageArray['endPage'] = $url.'&'.C('VAR_PAGE')."=$theEndRow"; $pageArray['nextPages'] = $url.'&'.C('VAR_PAGE')."=$nextRow"; $pageArray['prePages'] = $url.'&'.C('VAR_PAGE')."=$preRow"; $pageArray['linkPages'] = $linkPage; $pageArray['nowPage'] = $this->nowPage; return $pageArray; } return $pageStr; } } class Template { protected $tagLib = array(); protected $templateFile = ''; public $tVar = array(); public $config = array(); private $literal = array(); static public function getInstance() { return get_instance_of(__CLASS__); } public function __construct(){ $this->config['cache_path'] = C('TMPL_CACHE_PATH'); $this->config['template_suffix'] = '.html'; $this->config['cache_suffix'] = '.php'; $this->config['tmpl_cache'] = C('TMPL_CACHE_ON'); $this->config['cache_time'] = C('TMPL_CACHE_TIME'); $this->config['taglib_begin'] = $this->stripPreg(C('TAGLIB_BEGIN')); $this->config['taglib_end'] = $this->stripPreg(C('TAGLIB_END')); $this->config['tmpl_begin'] = $this->stripPreg(C('TMPL_L_DELIM')); $this->config['tmpl_end'] = $this->stripPreg(C('TMPL_R_DELIM')); $this->config['default_tmpl'] = C('TMPL_FILE_NAME'); $this->config['tag_level'] = C('TAG_NESTED_LEVEL'); } private function stripPreg($str) { $str = str_replace(array('{','}','(',')','|','[',']'),array('\{','\}','\(','\)','\|','\[','\]'),$str); return $str; } public function get($name) { if(isset($this->tVar[$name])) return $this->tVar[$name]; else return false; } public function set($name,$value) { $this->tVar[$name]= $value; } public function load($templateFile,$templateVar,$charset) { $this->tVar = $templateVar; $templateCacheFile = $this->loadTemplate($templateFile); extract($templateVar, EXTR_OVERWRITE); include $templateCacheFile; } public function loadTemplate ($tmplTemplateFile='') { if(empty($tmplTemplateFile)) $tmplTemplateFile = $this->config['default_tmpl']; if(!is_file($tmplTemplateFile)){ $tmplTemplateFile = dirname($this->config['default_tmpl']).'/'.$tmplTemplateFile.$this->config['template_suffix']; if(!is_file($tmplTemplateFile)) throw_exception(L('模板不存在')); } $this->templateFile = $tmplTemplateFile; $tmplCacheFile = $this->config['cache_path'].'/'.qm_md5($tmplTemplateFile).$this->config['cache_suffix']; $tmplContent = ''; $tmplContent = file_get_contents($tmplTemplateFile); $tmplContent = $this->compiler($tmplContent); if(!is_dir($this->config['cache_path'])) mkdir($this->config['cache_path'],0777,true); if( false === file_put_contents($tmplCacheFile,trim($tmplContent))){; throw_exception(L('缓存文件写入失败')); } return $tmplCacheFile; } protected function compiler( $tmplContent) { $tmplContent = $this->parse($tmplContent); if(ini_get('short_open_tag')) $tmplContent = preg_replace('/(<\?(?!php|=|$))/i', '<?php echo \'\\1\'; ?>'."\n", $tmplContent ); $tmplContent = preg_replace('/<!--###literal(\d)###-->/eis',"\$this->restoreLiteral('\\1')",$tmplContent); $tmplContent = '<?php if (!defined(\'CORE_PATH\')) exit();?>'.$tmplContent; return trim($tmplContent); } public function parse($content) { $begin = $this->config['taglib_begin']; $end = $this->config['taglib_end']; $content = preg_replace('/'.$begin.'literal'.$end.'(.*?)'.$begin.'\/literal'.$end.'/eis',"\$this->parseLiteral('\\1')",$content); if(C('TAGLIB_PRE_LOAD')) { $tagLibs = explode(',',C('TAGLIB_PRE_LOAD')); foreach ((array)$tagLibs as $tag){ $this->parseTagLib($tag,$content); } } $tagLibs = explode(',',C('TAGLIB_BUILD_IN')); foreach ($tagLibs as $tag){ $this->parseTagLib($tag,$content,true); } $content = preg_replace('/('.$this->config['tmpl_begin'].')(\S.+?)('.$this->config['tmpl_end'].')/eis',"\$this->parseTag('\\2')",$content); return $content; } function parseLiteral($content) { if(trim($content)=='') return ''; $content = stripslashes($content); $i = count($this->literal); $parseStr = "<!--###literal{$i}###-->"; $this->literal[$i] = $content; return $parseStr; } function restoreLiteral($tag) { $parseStr = $this->literal[$tag]; unset($this->literal[$tag]); return $parseStr; } public function parseTagLib($tagLib,&$content,$hide=false) { $begin = $this->config['taglib_begin']; $end = $this->config['taglib_end']; $tLib = get_instance_of('TagLibCx'); if($tLib->valid()) { $tagList = $tLib->getTagList(); foreach($tagList as $tag) { if( !$hide) $startTag = $tagLib.':'.$tag['name']; else $startTag = $tag['name']; if($tag['nested'] && $this->config['tag_level']>1) $level = $this->config['tag_level']; else $level = 1; $endTag = $startTag; if(false !== stripos($content,C('TAGLIB_BEGIN').$startTag)) { if(empty($tag['attribute'])){ if($tag['content'] !='empty'){ for($i=0;$i<$level;$i++) $content = preg_replace('/'.$begin.$startTag.'(\s*?)'.$end.'(.*?)'.$begin.'\/'.$endTag.'(\s*?)'.$end.'/eis',"\$this->parseXmlTag('".$tagLib."','".$tag['name']."','\\1','\\2')",$content); }else{ $content = preg_replace('/'.$begin.$startTag.'(\s*?)\/(\s*?)'.$end.'/eis',"\$this->parseXmlTag('".$tagLib."','".$tag['name']."','\\1','')",$content); } }elseif($tag['content'] !='empty') { for($i=0;$i<$level;$i++) $content = preg_replace('/'.$begin.$startTag.'\s(.*?)'.$end.'(.+?)'.$begin.'\/'.$endTag.'(\s*?)'.$end.'/eis',"\$this->parseXmlTag('".$tagLib."','".$tag['name']."','\\1','\\2')",$content); }else { $content = preg_replace('/'.$begin.$startTag.'\s(.*?)\/(\s*?)'.$end.'/eis',"\$this->parseXmlTag('".$tagLib."','".$tag['name']."','\\1','')",$content); } } } } } public function parseXmlTag($tagLib,$tag,$attr,$content) { $attr = stripslashes($attr); $content = stripslashes($content); if(ini_get('magic_quotes_sybase')) $attr = str_replace('\"','\'',$attr); $tLib = get_instance_of('TagLibCx'); if($tLib->valid()) { $parse = '_'.$tag; $content = trim($content); return $tLib->$parse($attr,$content); } } public function parseTag($tagStr){ $tagStr = stripslashes($tagStr); if(preg_match('/^[\s|\d]/is',$tagStr)) return C('TMPL_L_DELIM') . $tagStr .C('TMPL_R_DELIM'); $flag = substr($tagStr,0,1); $name = substr($tagStr,1); if('$' == $flag){ return $this->parseVar($name); }elseif(':' == $flag){ return '<?php echo '.$name.';?>'; }elseif('~' == $flag){ return '<?php '.$name.';?>'; }elseif('&' == $flag){ return '<?php echo C("'.$name.'");?>'; }elseif('%' == $flag){ return '<?php echo L("'.$name.'");?>'; }elseif('@' == $flag){ if(strpos($name,'.')) { $array = explode('.',$name); return '<?php echo $_SESSION["'.$array[0].'"]["'.$array[1].'"];?>'; }else{ return '<?php echo $_SESSION["'.$name.'"];?>'; } }elseif('#' == $flag){ if(strpos($name,'.')) { $array = explode('.',$name); return '<?php echo $_COOKIE["'.$array[0].'"]["'.$array[1].'"];?>'; }else{ return '<?php echo $_COOKIE["'.$name.'"];?>'; } }elseif('.' == $flag){ return '<?php echo $_GET["'.$name.'"];?>'; }elseif('^' == $flag){ return '<?php echo $_POST["'.$name.'"];?>'; }elseif('*' == $flag){ return '<?php echo constant("'.$name.'");?>'; } $tagStr = trim($tagStr); if(substr($tagStr,0,2)=='//' || (substr($tagStr,0,2)=='/*' && substr($tagStr,-2)=='*/')) return ''; $pos = strpos($tagStr,':'); $tag = substr($tagStr,0,$pos); $args = trim(substr($tagStr,$pos+1)); if(!empty($args)) { $tag = strtolower($tag); switch($tag){ case 'include': return $this->parseInclude($args); break; case 'load': return $this->parseLoad($args); break; default: if(C('TAG_EXTEND_PARSE')) { $method = C('TAG_EXTEND_PARSE'); if(array_key_exists($tag,$method)) return $method[$tag]($args); } } } return C('TMPL_L_DELIM') . $tagStr .C('TMPL_R_DELIM'); } public function parseLoad($str) { $type = strtolower(substr(strrchr($str, '.'),1)); $parseStr = ''; if($type=='js') { $parseStr .= '<script type="text/javascript" src="'.$str.'"></script>'; }elseif($type=='css') { $parseStr .= '<link rel="stylesheet" type="text/css" href="'.$str.'" />'; } return $parseStr; } public function parseVar($varStr){ $varStr = trim($varStr); static $_varParseList = array(); if(isset($_varParseList[$varStr])) return $_varParseList[$varStr]; $parseStr =''; $varExists = true; if(!empty($varStr)){ $varArray = explode('|',$varStr); $var = array_shift($varArray); if(preg_match('/->/is',$var)) return ''; if('Think.' == substr($var,0,6)){ $name = $this->parseThinkVar($var); } elseif( false !== strpos($var,'.')) { $vars = explode('.',$var); $var = array_shift($vars); switch(strtolower(C('TMPL_VAR_IDENTIFY'))) { case 'array': $name = '$'.$var; foreach ($vars as $key=>$val) $name .= '["'.$val.'"]'; break; case 'obj': $name = '$'.$var; foreach ($vars as $key=>$val) $name .= '->'.$val; break; default: $name = 'is_array($'.$var.')?$'.$var.'["'.$vars[0].'"]:$'.$var.'->'.$vars[0]; } } elseif(false !==strpos($var,':')){ $vars = explode(':',$var); $var = str_replace(':','->',$var); $name = "$".$var; $var = $vars[0]; } elseif(false !== strpos($var,'[')) { $name = "$".$var; preg_match('/(.+?)\[(.+?)\]/is',$var,$match); $var = $match[1]; } else { $name = "$$var"; } if(count($varArray)>0) $name = $this->parseVarFunction($name,$varArray); $parseStr = '<?php echo ('.$name.'); ?>'; } $_varParseList[$varStr] = $parseStr; return $parseStr; } public function parseVarFunction($name,$varArray){ $length = count($varArray); $template_deny_funs = explode(',',C('TMPL_DENY_FUNC_LIST')); for($i=0;$i<$length ;$i++ ){ if (0===stripos($varArray[$i],'default=')) $args = explode('=',$varArray[$i],2); else $args = explode('=',$varArray[$i]); $args[0] = trim($args[0]); switch(strtolower($args[0])) { case 'default': $name = '('.$name.')?('.$name.'):'.$args[1]; break; default: if(!in_array($args[0],$template_deny_funs)){ if(isset($args[1])){ if(strstr($args[1],'###')){ $args[1] = str_replace('###',$name,$args[1]); $name = "$args[0]($args[1])"; }else{ $name = "$args[0]($name,$args[1])"; } }else if(!empty($args[0])){ $name = "$args[0]($name)"; } } } } return $name; } public function parseThinkVar($varStr){ $vars = explode('.',$varStr); $vars[1] = strtoupper(trim($vars[1])); $parseStr = ''; if(count($vars)>=3){ $vars[2] = trim($vars[2]); switch($vars[1]){ case 'SERVER': $parseStr = '$_SERVER[\''.strtoupper($vars[2]).'\']';break; case 'GET': $parseStr = '$_GET[\''.$vars[2].'\']';break; case 'POST': $parseStr = '$_POST[\''.$vars[2].'\']';break; case 'COOKIE': if(isset($vars[3])) { $parseStr = '$_COOKIE[\''.$vars[2].'\'][\''.$vars[3].'\']'; }else{ $parseStr = '$_COOKIE[\''.$vars[2].'\']'; }break; case 'SESSION': if(isset($vars[3])) { $parseStr = '$_SESSION[\''.$vars[2].'\'][\''.$vars[3].'\']'; }else{ $parseStr = '$_SESSION[\''.$vars[2].'\']'; } break; case 'ENV': $parseStr = '$_ENV[\''.$vars[2].'\']';break; case 'REQUEST': $parseStr = '$_REQUEST[\''.$vars[2].'\']';break; case 'CONST': $parseStr = strtoupper($vars[2]);break; case 'LANG': $parseStr = 'L("'.$vars[2].'")';break; case 'CONFIG': if(isset($vars[3])) { $vars[2] .= '.'.$vars[3]; } $parseStr = 'C("'.$vars[2].'")';break; default:break; } }else if(count($vars)==2){ switch($vars[1]){ case 'NOW': $parseStr = "date('Y-m-d g:i a',time())"; break; case 'VERSION': $parseStr = 'THINK_VERSION'; break; case 'TEMPLATE': $parseStr = 'C("TMPL_FILE_NAME")'; break; case 'LDELIM': $parseStr = 'C("TMPL_L_DELIM")'; break; case 'RDELIM': $parseStr = 'C("TMPL_R_DELIM")'; break; default: if(defined($vars[1])) $parseStr = $vars[1]; } } return $parseStr; } public function parseInclude($tmplPublicName){ if(substr($tmplPublicName,0,9)=='__THEME__'){ $tmplTemplateFile = THEME_PATH.'/'.substr($tmplPublicName,10).'.html'; $parseStr = file_get_contents($tmplTemplateFile); return $this->parse($parseStr); } if(substr($tmplPublicName,0,1)=='$'){ $tmplPublicName = $this->get(substr($tmplPublicName,1)); } if(is_file($tmplPublicName)) { $parseStr = file_get_contents($tmplPublicName); }else { $tmplPublicName = trim($tmplPublicName); if(strpos($tmplPublicName,'@')){ $tmplTemplateFile = dirname(dirname(dirname($this->templateFile))).'/'.str_replace(array('@',':'),'/',$tmplPublicName); }elseif(strpos($tmplPublicName,':')){ $tmplTemplateFile = dirname(dirname($this->templateFile)).'/'.str_replace(':','/',$tmplPublicName); }else{ $tmplTemplateFile = dirname($this->templateFile).'/'.$tmplPublicName; } $tmplTemplateFile .= $this->config['template_suffix']; $parseStr = file_get_contents($tmplTemplateFile); } return $this->parse($parseStr); } } class TagLib { protected $xml = ''; protected $tagLib =''; protected $tagList = array(); protected $parse = array(); protected $valid = false; protected $tpl; protected $comparison = array(' nheq '=>' !== ',' heq '=>' === ',' neq '=>' != ',' eq '=>' == ',' egt '=>' >= ',' gt '=>' > ',' elt '=>' <= ',' lt '=>' < '); public function __construct() { $this->tagLib = 'tag'; $this->tpl = Template::getInstance(); $this->_initialize(); $this->load(); } public function _initialize() { $this->xml =CONF_PATH.'/'.$this->tagLib.'.xml'; } public function load() { $xml_str = file_get_contents($this->xml); $array = (array) simplexml_load_string($xml_str); if($array !== false) { $this->parse = $array; $this->valid = true; }else{ $this->valid = false; } } public function valid() { return $this->valid; } public function getTagLib() { return $this->tagLib; } public function getTagList() { if(empty($this->tagList)) { $tags = $this->parse['tag']; $list = array(); if(is_object($tags)) { $list[] = array( 'name'=>$tags->name, 'content'=>$tags->bodycontent, 'nested'=>(!empty($tags->nested) && $tags->nested !='false') ?$tags->nested:0, 'attribute'=>isset($tags->attribute)?$tags->attribute:'', ); if(isset($tags->alias)) { $alias = explode(',',$tag->alias); foreach ($alias as $tag){ $list[] = array( 'name'=>$tag, 'content'=>$tags->bodycontent, 'nested'=>(!empty($tags->nested) && $tags->nested != 'false') ?$tags->nested:0, 'attribute'=>isset($tags->attribute)?$tags->attribute:'', ); } } }else{ foreach($tags as $tag) { $tag = (array)$tag; $list[] = array( 'name'=>$tag['name'], 'content'=>$tag['bodycontent'], 'nested'=>(!empty($tag['nested']) && $tag['nested'] != 'false' )?$tag['nested']:0, 'attribute'=>isset($tag['attribute'])?$tag['attribute']:'', ); if(isset($tag['alias'])) { $alias = explode(',',$tag['alias']); foreach ($alias as $tag1){ $list[] = array( 'name'=>$tag1, 'content'=>$tag['bodycontent'], 'nested'=>(!empty($tag['nested']) && $tag['nested'] != 'false')?$tag['nested']:0, 'attribute'=>isset($tag['attribute'])?$tag['attribute']:'', ); } } } } $this->tagList = $list; } return $this->tagList; } public function getTagAttrList($tagName) { static $_tagCache = array(); $_tagCacheId = md5($this->tagLib.$tagName); if(isset($_tagCache[$_tagCacheId])) { return $_tagCache[$_tagCacheId]; } $list = array(); $tags = $this->parse['tag']; foreach($tags as $tag) { $tag = (array)$tag; if( strtolower($tag['name']) == strtolower($tagName)) { if(isset($tag['attribute'])) { if(is_object($tag['attribute'])) { $attr = $tag['attribute']; $list[] = array( 'name'=>$attr->name, 'required'=>$attr->required ); }else{ foreach($tag['attribute'] as $attr) { $attr = (array)$attr; $list[] = array( 'name'=>$attr['name'], 'required'=>$attr['required'] ); } } } } } $_tagCache[$_tagCacheId] = $list; return $list; } public function parseXmlAttr($attr,$tag) { $attr = str_replace(array('&','THEME_PATH','APP_TPL_PATH'),array('___',THEME_PATH,APP_TPL_PATH), $attr); $xml = '<tpl><tag '.$attr.' /></tpl>'; $xml = simplexml_load_string($xml); if(!$xml) { throw_exception('xml文件渲染失败 : '.$attr); } $xml = (array)($xml->tag->attributes()); $array = array_change_key_case($xml['@attributes']); $attrs = $this->getTagAttrList($tag); foreach($attrs as $val) { $name = strtolower($val['name']); if( !isset($array[$name])) { $array[$name] = ''; }else{ $array[$name] = str_replace('___','&',$array[$name]); } } return $array; } public function parseCondition($condition) { $condition = str_ireplace(array_keys($this->comparison),array_values($this->comparison),$condition); $condition = preg_replace('/\$(\w+):(\w+)\s/is','$\\1->\\2 ',$condition); switch(strtolower(C('TMPL_VAR_IDENTIFY'))) { case 'array': $condition = preg_replace('/\$(\w+)\.(\w+)\s/is','$\\1["\\2"] ',$condition); break; case 'obj': $condition = preg_replace('/\$(\w+)\.(\w+)\s/is','$\\1->\\2 ',$condition); break; default: $condition = preg_replace('/\$(\w+)\.(\w+)\s/is','(is_array($\\1)?$\\1["\\2"]:$\\1->\\2) ',$condition); } return $condition; } public function autoBuildVar($name) { if('Think.' == substr($name,0,6)){ return $this->parseThinkVar($name); }elseif(strpos($name,'.')) { $vars = explode('.',$name); $var = array_shift($vars); switch(strtolower(C('TMPL_VAR_IDENTIFY'))) { case 'array': $name = '$'.$var; foreach ($vars as $key=>$val){ if(0===strpos($val,'$')) { $name .= '["{'.$val.'}"]'; }else{ $name .= '["'.$val.'"]'; } } break; case 'obj': $name = '$'.$var; foreach ($vars as $key=>$val) $name .= '->'.$val; break; default: $name = 'is_array($'.$var.')?$'.$var.'["'.$vars[0].'"]:$'.$var.'->'.$vars[0]; } }elseif(strpos($name,':')){ $name = '$'.str_replace(':','->',$name); }elseif(!defined($name)) { $name = '$'.$name; } return $name; } public function parseThinkVar($varStr){ $vars = explode('.',$varStr); $vars[1] = strtoupper(trim($vars[1])); $parseStr = ''; if(count($vars)>=3){ $vars[2] = trim($vars[2]); switch($vars[1]){ case 'SERVER': $parseStr = '$_SERVER[\''.$vars[2].'\']';break; case 'GET': $parseStr = '$_GET[\''.$vars[2].'\']';break; case 'POST': $parseStr = '$_POST[\''.$vars[2].'\']';break; case 'COOKIE': $parseStr = '$_COOKIE[\''.$vars[2].'\']';break; case 'SESSION': $parseStr = '$_SESSION[\''.$vars[2].'\']';break; case 'ENV': $parseStr = '$_ENV[\''.$vars[2].'\']';break; case 'REQUEST': $parseStr = '$_REQUEST[\''.$vars[2].'\']';break; case 'CONST': $parseStr = strtoupper($vars[2]);break; case 'LANG': $parseStr = 'L("'.$vars[2].'")';break; case 'CONFIG': $parseStr = 'C("'.$vars[2].'")';break; } }else if(count($vars)==2){ switch($vars[1]){ case 'NOW': $parseStr = "date('Y-m-d g:i a',time())";break; case 'VERSION': $parseStr = 'THINK_VERSION';break; case 'TEMPLATE':$parseStr = 'C("TMPL_FILE_NAME")';break; case 'LDELIM': $parseStr = 'C("TMPL_L_DELIM")';break; case 'RDELIM': $parseStr = 'C("TMPL_R_DELIM")';break; default: if(defined($vars[1])) $parseStr = $vars[1]; } } return $parseStr; } } class TagLibCx extends TagLib { public function _include($attr) { $tag = $this->parseXmlAttr($attr,'include'); $file = $tag['file']; if(is_file($file)) { $parseStr = file_get_contents($file); return $this->tpl->parse($parseStr); }else { return $this->tpl->parseInclude($file); } } public function _php($attr,$content) { $parseStr = '<?php '.$content.' ?>'; return $parseStr; } public function _iterate($attr,$content) { static $_iterateParseCache = array(); $cacheIterateId = md5($attr.$content); if(isset($_iterateParseCache[$cacheIterateId])) return $_iterateParseCache[$cacheIterateId]; $tag = $this->parseXmlAttr($attr,'iterate'); $name = $tag['name']; $id = $tag['id']; $empty = isset($tag['empty'])?$tag['empty']:''; $key = !empty($tag['key'])?$tag['key']:'i'; $mod = isset($tag['mod'])?$tag['mod']:'2'; $name = $this->autoBuildVar($name); $parseStr = '<?php if(is_array('.$name.')): ?>'; $parseStr .= '<?php $'.$key.' = 0;?>'; if(isset($tag['length']) && '' !=$tag['length'] ) { $parseStr .= '<?php $__LIST__ = array_slice('.$name.','.$tag['offset'].','.$tag['length'].') ?>'; }elseif(isset($tag['offset']) && '' !=$tag['offset']){ $parseStr .= '<?php $__LIST__ = array_slice('.$name.','.$tag['offset'].') ?>'; }else{ $parseStr .= '<?php $__LIST__ = '.$name.'?>'; } $parseStr .= '<?php if( count($__LIST__)==0 ) : echo "'.$empty.'" ; ?>'; $parseStr .= '<?php else: ?>'; $parseStr .= '<?php foreach($__LIST__ as $key=>$'.$id.'): ?>'; $parseStr .= '<?php ++$'.$key.';?>'; $parseStr .= '<?php $mod = ($'.$key.' % '.$mod.' )?>'; $parseStr .= $this->tpl->parse($content); $parseStr .= '<?php endforeach; ?>'; $parseStr .= '<?php endif; ?>'; $parseStr .= '<?php else: echo "'.$empty.'" ;?>'; $parseStr .= '<?php endif; ?>'; $_iterateParseCache[$cacheIterateId] = $parseStr; if(!empty($parseStr)) { return $parseStr; } return ; } public function _volist($attr,$content) { return $this->_iterate($attr,$content); } public function _resultset($attr,$content) { return $this->_iterate($attr,$content); } public function _sublist($attr,$content) { return $this->_iterate($attr,$content); } public function _foreach($attr,$content) { static $_iterateParseCache = array(); $cacheIterateId = md5($attr.$content); if(isset($_iterateParseCache[$cacheIterateId])) return $_iterateParseCache[$cacheIterateId]; $tag = $this->parseXmlAttr($attr,'foreach'); $name= $tag['name']; $item = $tag['item']; $key = !empty($tag['key'])?$tag['key']:'key'; $name= $this->autoBuildVar($name); $parseStr = '<?php if(isset('.$name.')): ?>'; $parseStr .= '<?php foreach('.$name.' as $'.$key.'=>$'.$item.'): ?>'; $parseStr .= $this->tpl->parse($content); $parseStr .= '<?php endforeach; ?>'; $parseStr .= '<?php endif; ?>'; $_iterateParseCache[$cacheIterateId] = $parseStr; if(!empty($parseStr)) { return $parseStr; } return ; } public function _subeach($attr,$content) { return $this->_foreach($attr,$content); } public function _url($attr) { $tag = $this->parseXmlAttr($attr,'url'); $action = !empty($tag['action'])?$tag['action']:ACTION_NAME; $module = !empty($tag['module'])?$tag['module']:MODULE_NAME; $route = !empty($tag['route'])?$tag['route']:''; $app = !empty($tag['app'])?$tag['app']:APP_NAME; $params = !empty($tag['params'])?$tag['params']:''; $parseStr= '<?php echo url("'.$action.'","'.$module.'","'.$route.'","'.$app.'","'.$params.'");?>'; return $parseStr; } public function _var($attr) { $tag = $this->parseXmlAttr($attr,'var'); $name = $tag['name']; $default = !empty($tag['default'])?$tag['default']:''; $varArray = explode('|',$name); $name = array_shift($varArray); $name = $this->autoBuildVar($name); if(count($varArray)>0) { $name = $this->tpl->parseVarFunction($name,$varArray); } if(!empty($default)) { $name = '('.$name.')?('.$name.'):\''.$default.'\''; } $parseStr = '<?php echo ('.$name.');?>'; return $parseStr; } public function _defined($attr,$content) { $tag = $this->parseXmlAttr($attr,'defined'); $name = $tag['name']; $parseStr = '<?php if(defined("'.$name.'")): ?>'; $parseStr .= $content.'<?php endif; ?>'; return $parseStr; } public function _if($attr,$content) { $tag = $this->parseXmlAttr($attr,'if'); $condition = $this->parseCondition($tag['condition']); $parseStr = '<?php if('.$condition.'): ?>'.$content.'<?php endif; ?>'; return $parseStr; } public function _elseif($attr,$content) { $tag = $this->parseXmlAttr($attr,'elseif'); $condition = $this->parseCondition($tag['condition']); $parseStr = '<?php elseif('.$condition.'): ?>'; return $parseStr; } public function _else($attr) { $parseStr = '<?php else: ?>'; return $parseStr; } public function _switch($attr,$content) { $tag = $this->parseXmlAttr($attr,'switch'); $name = $tag['name']; $varArray = explode('|',$name); $name = array_shift($varArray); $name = $this->autoBuildVar($name); if(count($varArray)>0) $name = $this->tpl->parseVarFunction($name,$varArray); $parseStr = '<?php switch('.$name.'): ?>'.$content.'<?php endswitch;?>'; return $parseStr; } public function _case($attr,$content) { $tag = $this->parseXmlAttr($attr,'case'); $value = $tag['value']; if('$' == substr($value,0,1)) { $varArray = explode('|',$value); $value = array_shift($varArray); $value = $this->autoBuildVar(substr($value,1)); if(count($varArray)>0) $value = $this->tpl->parseVarFunction($value,$varArray); $value = 'case '.$value.': '; }elseif(strpos($value,'|')){ $values = explode('|',$value); $value = ''; foreach ($values as $val){ $value .= 'case "'.addslashes($val).'": '; } }else{ $value = 'case "'.$value.'": '; } $parseStr = '<?php '.$value.' ?>'.$content; if('' ==$tag['break'] || $tag['break']) { $parseStr .= '<?php break;?>'; } return $parseStr; } public function _default($attr) { $parseStr = '<?php default: ?>'; return $parseStr; } public function _compare($attr,$content,$type='eq') { $tag = $this->parseXmlAttr($attr,'compare'); $name = $tag['name']; $value = $tag['value']; $type = $tag['type']?$tag['type']:$type; $type = $this->parseCondition(' '.$type.' '); $varArray = explode('|',$name); $name = array_shift($varArray); $name = $this->autoBuildVar($name); if(count($varArray)>0) $name = $this->tpl->parseVarFunction($name,$varArray); if('$' == substr($value,0,1)) { $value = $this->autoBuildVar(substr($value,1)); }else { $value = '"'.$value.'"'; } $parseStr = '<?php if(('.$name.') '.$type.' '.$value.'): ?>'.$content.'<?php endif; ?>'; return $parseStr; } public function _eq($attr,$content) { return $this->_compare($attr,$content,'eq'); } public function _equal($attr,$content) { return $this->_eq($attr,$content); } public function _neq($attr,$content) { return $this->_compare($attr,$content,'neq'); } public function _notequal($attr,$content) { return $this->_neq($attr,$content); } public function _gt($attr,$content) { return $this->_compare($attr,$content,'gt'); } public function _lt($attr,$content) { return $this->_compare($attr,$content,'lt'); } public function _egt($attr,$content) { return $this->__compare($attr,$content,'egt'); } public function _elt($attr,$content) { return $this->_compare($attr,$content,'elt'); } public function _heq($attr,$content) { return $this->_compare($attr,$content,'heq'); } public function _nheq($attr,$content) { return $this->_compare($attr,$content,'nheq'); } public function _present($attr,$content) { $tag = $this->parseXmlAttr($attr,'present'); $name = $tag['name']; $name = $this->autoBuildVar($name); $parseStr = '<?php if(isset('.$name.')): ?>'.$content.'<?php endif; ?>'; return $parseStr; } public function _notpresent($attr,$content) { $tag = $this->parseXmlAttr($attr,'notpresent'); $name = $tag['name']; $name = $this->autoBuildVar($name); $parseStr = '<?php if(!isset('.$name.')): ?>'.$content.'<?php endif; ?>'; return $parseStr; } public function _session($attr,$content) { $tag = $this->parseXmlAttr($attr,'session'); $name = $tag['name']; if(strpos($name,'|')) { $array = explode('|',$name); $parseStr = '<?php if( '; for($i=0; $i<count($array); $i++) { $parseStr .= 'isset($_SESSION["'.$array[$i].'"]) || '; } $parseStr = substr($parseStr,0,-3); $parseStr .='): ?>'.$content.'<?php endif; ?>'; }elseif(strpos($name,',')) { $array = explode(',',$name); $parseStr = '<?php if( '; for($i=0; $i<count($array); $i++) { $parseStr .= 'isset($_SESSION["'.$array[$i].'"]) && '; } $parseStr = substr($parseStr,0,-3); $parseStr .='): ?>'.$content.'<?php endif; ?>'; }else { $parseStr = '<?php if(isset($_SESSION["'.$name.'"])): ?>'.$content.'<?php endif; ?>'; } return $parseStr; } public function _nosession($attr,$content) { $tag = $this->parseXmlAttr($attr,'nosession'); $name = $tag['name']; if(strpos($name,'|')) { $array = explode('|',$name); $parseStr = '<?php if( '; for($i=0; $i<count($array); $i++) { $parseStr .= '!isset($_SESSION["'.$array[$i].'"]) || '; } $parseStr = substr($parseStr,0,-3); $parseStr .='): ?>'.$content.'<?php endif; ?>'; }elseif(strpos($name,',')) { $array = explode(',',$name); $parseStr = '<?php if( '; for($i=0; $i<count($array); $i++) { $parseStr .= '!isset($_SESSION["'.$array[$i].'"]) && '; } $parseStr = substr($parseStr,0,-3); $parseStr .='): ?>'.$content.'<?php endif; ?>'; }else { $parseStr = '<?php if( !isset($_SESSION["'.$name.'"])): ?>'.$content.'<?php endif; ?>'; } return $parseStr; } public function _layout($attr,$content) { $tag = $this->parseXmlAttr($attr,'layout'); $name = $tag['name']; $cache = $tag['cache']?$tag['cache']:0; $parseStr= "<!-- layout::$name::$cache -->"; return $parseStr; } } class UploadFile { public $maxSize = -1; public $supportMulti = true; public $allowExts = array(); public $allowTypes = array(); public $thumb = false; public $thumbMaxWidth; public $thumbMaxHeight; public $thumbPrefix = 'thumb_'; public $thumbSuffix = ''; public $thumbPath = ''; public $thumbFile = ''; public $thumbRemoveOrigin = false; public $zipImages = false; public $autoSub = false; public $subType = 'hash'; public $dateFormat = 'Ymd'; public $hashLevel = 1; public $savePath = ''; public $saveName = ''; public $autoCheck = true; public $uploadReplace = false; public $saveRule = ''; public $hashType = 'md5_file'; private $error = ''; private $uploadFileInfo ; public function __construct($maxSize='',$allowExts='',$allowTypes='',$savePath=UPLOAD_PATH,$saveRule='') { if(!empty($maxSize) && is_numeric($maxSize)) { $this->maxSize = $maxSize; } if(!empty($allowExts)) { if(is_array($allowExts)) { $this->allowExts = array_map('strtolower',$allowExts); }else { $this->allowExts = explode(',',strtolower($allowExts)); } } if(!empty($allowTypes)) { if(is_array($allowTypes)) { $this->allowTypes = array_map('strtolower',$allowTypes); }else { $this->allowTypes = explode(',',strtolower($allowTypes)); } } if(!empty($saveRule)) { $this->saveRule = $saveRule; }else{ $this->saveRule = C('UPLOAD_FILE_RULE'); } $this->savePath = $savePath; } private function save($file) { $filename = $file['savepath'].$file['savename']; if(!$this->uploadReplace && is_file($filename)) { $this->error = '文件已经存在'.$filename; return false; } $saveFileName = auto_charset($filename,'utf-8','gbk'); if(!move_uploaded_file($file['tmp_name'], $saveFileName)) { $this->error = '文件保存失败'; return false; } if($this->thumb) { getThumbImage($saveFileName,100,100); getThumbImage($saveFileName,300,300); } if($this->zipImags) { } return true; } public function upload($savePath ='') { mkdir($savePath,0777,true); if(empty($savePath)) { $savePath = $this->savePath; } if(!is_dir($savePath)) { if(is_dir(base64_decode($savePath))) { $savePath = base64_decode($savePath); }else{ if(!mkdir($savePath,0777,true)){ $this->error = '不存在的上传路径:'.$savePath; return false; } } }else { if(!is_writeable($savePath)) { $this->error = '不可写的上传路径:'.$savePath; return false; } } $fileInfo = array(); $isUpload = false; $files = $this->dealFiles($_FILES); foreach($files as $key => $file) { if(!empty($file['name'])) { $file['key'] = $key; $file['extension'] = $this->getExt($file['name']); $file['savepath'] = $savePath; $file['savename'] = $this->getSaveName($file); if($GLOBALS['fromMobile'] == true && empty($file['extension'])){ $file['extension'] = 'jpg'; $file['savename'] = trim($file['savename'],'.').'.jpg'; }else{ if($this->autoCheck) { if(!$this->check($file)) return false; } } if(!$this->save($file)) { return false; } if(function_exists($this->hashType)) { $fun = $this->hashType; $file['hash'] = $fun(auto_charset($file['savepath'].$file['savename'],'utf-8','gbk')); } unset($file['tmp_name'],$file['error']); $fileInfo[] = $file; $isUpload = true; } } if($isUpload) { $this->uploadFileInfo = $fileInfo; return true; }else { $this->error = '文件上传失败'; return false; } } private function dealFiles($files) { $fileArray = array(); foreach ($files as $file){ if(is_array($file['name'])) { $keys = array_keys($file); $count = count($file['name']); for ($i=0; $i<$count; $i++) { foreach ($keys as $key) { $fileArray[$i][$key] = $file[$key][$i]; } } }else{ $fileArray = $files; } break; } return $fileArray; } protected function error($errorNo) { switch($errorNo) { case 1: $size = ini_get("upload_max_filesize"); if( strpos($size,'M')!==false || strpos($size,'m')!==false ) { $size = intval($size)*1024; $size = byte_format( $size ); } if(isset($this->maxSize) && !empty($this->maxSize)){ $size = byte_format($this->maxSize); } $this->error = '上传文件超过大小限制'; break; case 2: $size = ini_get("upload_max_filesize"); if( strpos($size,'M')!==false || strpos($size,'m')!==false ) { $size = intval($size)*1024; $size = byte_format( $size ); } if(isset($this->maxSize) && !empty($this->maxSize)){ $size = byte_format($this->maxSize); } $this->error = '上传文件超过大小限制'; break; case 3: $this->error = '文件只有部分被上传'; break; case 4: $this->error = '没有文件被上传'; break; case 6: $this->error = '找不到临时文件夹'; break; case 7: $this->error = '文件写入失败'; break; default: $this->error = '未知上传错误'; } return ; } private function getSaveName($filename) { if($this->saveName){ return $this->saveName; }else{ $rule = $this->saveRule; if(empty($rule)) { $saveName = $filename['name']; }else { if(function_exists($rule)) { $saveName = $rule().".".$filename['extension']; }else { $saveName = $rule.".".$filename['extension']; } } if($this->autoSub) { $saveName = $this->getSubName($filename).'/'.$saveName; } return $saveName; } } private function getSubName($file) { switch($this->subType) { case 'date': $dir = date($this->dateFormat,time()); break; case 'hash': default: $name = md5($file['savename']); $dir = ''; for($i=0;$i<$this->hashLevel;$i++) { $dir .= $name{0}.'/'; } break; } if(!is_dir($file['savepath'].$dir)) { mkdir($file['savepath'].$dir,0777,true); } return $dir; } private function check($file) { if($file['error']!== 0) { $this->error($file['error']); return false; } if(!$this->checkSize($file['size'])) { $this->error = '上传文件大小不符！文件不能超过'.byte_format($this->maxSize); return false; } if(!$this->checkType($file['type'])) { $this->error = '上传文件MIME类型不允许！'; return false; } if(!$this->checkExt($file['extension'])) { $this->error = '上传文件类型不允许'; return false; } if(!$this->checkUpload($file['tmp_name'])) { $this->error = '上传文件失败'; return false; } return true; } private function checkType($type) { if(!empty($this->allowTypes)) { return in_array(strtolower($type),$this->allowTypes); } return true; } private function checkExt($ext) { if(!empty($this->allowExts)) { return in_array(strtolower($ext),$this->allowExts,true); } return true; } private function checkSize($size) { return !($size > $this->maxSize) || (-1 == $this->maxSize); } private function checkUpload($filename) { return is_uploaded_file($filename); } private function getExt($filename) { $pathinfo = pathinfo($filename); return $pathinfo['extension']; } public function getUploadFileInfo() { return $this->uploadFileInfo; } public function getErrorMsg() { return $this->error; } } class CacheFile extends Cache { protected $prefix='~@'; public function __construct($options='') { if(!empty($options['temp'])){ $this->options['temp'] = $options['temp']; }else { $this->options['temp'] = C('DATA_CACHE_PATH'); } if(!is_dir($this->options['temp'])){ mkdir($this->options['temp'] ,0777,true); } $this->options['expire'] = isset($options['expire'])?$options['expire']: C('DATA_CACHE_TIME'); if(substr($this->options['temp'], -1) != "/") $this->options['temp'] .= "/"; $this->options['length'] = !empty($options['length']) > 0 ? $options['length']:0; $this->connected = is_dir($this->options['temp']) && is_writeable($this->options['temp']); $this->init(); } private function init() { if (!is_dir($this->options['temp'])) { if (!mkdir($this->options['temp'],0777,true)){ dump('can not !!'); return false; } chmod($this->options['temp'], 0777); } } private function isConnected() { return $this->connected; } private function filename($name) { $name = md5($name); if(C('DATA_CACHE_SUBDIR')) { $dir =''; for($i=0;$i<C('DATA_PATH_LEVEL');$i++) { $dir .= $name{$i}.'/'; } if(!is_dir($this->options['temp'].$dir)) { mkdir($this->options['temp'].$dir,0777,true); } $filename = $dir.$this->prefix.$name.'.php'; }else{ $filename = $this->prefix.$name.'.php'; } return $this->options['temp'].$filename; } public function get($name) { $filename = $this->filename($name); if (!$this->isConnected() || !is_file($filename)) { return false; } $this->N('cache_read',1,$name); $content = file_get_contents($filename); if( false !== $content) { $expire = (int)substr($content,8, 12); if($expire != 0 && time() > filemtime($filename) + $expire) { unlink($filename); return false; } if(C('DATA_CACHE_CHECK')) { $check = substr($content,20, 32); $content = substr($content,52, -3); if($check != md5($content)) { return false; } }else { $content = substr($content,20, -3); } if(C('DATA_CACHE_COMPRESS') && function_exists('gzcompress')) { $content = gzuncompress($content); } $content = unserialize($content); return $content; } else { return false; } } public function set($name,$value,$expire=null) { $this->N('cache_write',1,$name); if(is_null($expire)) { $expire = $this->options['expire']; } $filename = $this->filename($name); $data = serialize($value); if( C('DATA_CACHE_COMPRESS') && function_exists('gzcompress')) { $data = gzcompress($data,3); } if(C('DATA_CACHE_CHECK')) { $check = md5($data); }else { $check = ''; } $data = "<?php\n//".sprintf('%012d',$expire).$check.$data."\n?>"; $result = file_put_contents($filename,$data); if($result) { if($this->options['length']>0) { $this->queue($name); } clearstatcache(); return true; }else { return false; } } public function rm($name) { if(file_exists($this->filename($name))){ return unlink($this->filename($name)); }else{ return false; } } public function clear() { $path = $this->options['temp']; if ( $dir = opendir( $path ) ) { while ( $file = readdir( $dir ) ) { $check = is_dir( $file ); if ( !$check ) unlink( $path . $file ); } closedir( $dir ); return true; } } }